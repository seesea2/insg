{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///./server/mongodb-ops.ts","webpack:///external \"axios\"","webpack:///./server/lta/lta.ts","webpack:///./server/lta/bus-stops.ts","webpack:///./server/gifts-products/gifts-products-inventory.ops.ts","webpack:///./server/gifts-users/gifts-users.ops.ts","webpack:///./server/string-ops.ts","webpack:///./server/server.ts","webpack:///external \"express-session\"","webpack:///external \"path\"","webpack:///external \"cors\"","webpack:///external \"body-parser\"","webpack:///./server/router/api-router.ts","webpack:///./server/router/lta.ts","webpack:///./server/lta/bus-arrival.ts","webpack:///./server/router/dictionary.ts","webpack:///./server/dictionary/dictionary.ts","webpack:///./server/router/gifts.ts","webpack:///./server/router/gifts-products.ts","webpack:///./server/gifts-products/gifts-products-categories.ops.ts","webpack:///external \"mongodb\"","webpack:///./server/gifts-products/gifts-products.ops.ts","webpack:///./server/router/gifts-orders.ts","webpack:///./server/router/gifts-users.ts","webpack:///external \"crypto\"","webpack:///./server/gifts-users/gifts-carts.ops.ts","webpack:///./server/gifts-orders/gifts-orders.ops.ts","webpack:///./server/router/gifts-staffs.ts","webpack:///./server/router/http-request.ts","webpack:///./server/http-request/http-request.ts","webpack:///./server/email/email.ops.ts","webpack:///external \"nodemailer\"","webpack:///./server/string-ops/random.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ObjectID","database","MONGO_URL","InitDb","MongoClient","connect","useNewUrlParser","client","db","MongoDb","DbCollection","collection","busArrivalUrl","busStopsUrl","headerConfig","headers","AccountKey","busStops","getBusStopsFromLta","skip","url","response","status","data","checkBusStopLocally","busStopCode","length","BusStopCode","getAllBusStops","newBusStops","temp","concat","getBusStopInfo","res","send","busStopInfo","getNearbyBusStops","latitude","longitude","undefined","nearbyStops","dLat","Latitude","Math","PI","dLong","Longitude","a","sin","cos","dist","atan2","sqrt","abs","push","GetInventory","find","toArray","inventory","message","AdjustInventory","_id","qty","updateOne","$set","modifiedOn","Date","upsert","rslt","ReserveInventory","id","cartItems","success","failed","dbInventory","product","$gte","$inc","$push","reservations","createdOn","result","nModified","$pull","DeleteInventoryReservation","updateRslt","console","log","bLogin","session","user","createIndex","unique","Login","req","uid","dbUsers","findOne","body","pwd","encrypt","Logout","Register","email","firstName","lastName","insertOne","insertedCount","ops","DeleteUser","deleteOne","UserInfo","RandomTypes","algorithm","crypto","scryptSync","iv","Buffer","alloc","random","type","rString","String","Number","Capital","floor","text","cipher","createCipheriv","crypted","update","final","e","decrypt","decipher","createDecipheriv","dec","randomNumber","randomCapitals","randomString","app","express","use","cors","bodyParser","json","urlencoded","extended","secret","resave","saveUninitialized","cookie","maxAge","sendFile","join","__dirname","static","dotfiles","all","next","listen","apiRouter","Router","busRouter","post","params","query","trim","then","respose","busArrival","catch","dictionaryRouter","word","config","app_id","app_key","CheckOxfordEntries","toLowerCase","resp","entries","return_result","lexicalEntries","results","lexicalEntry","new_lexicalEntry","lexicalCategory","pronunciations","entry","senses","sense","definitions","definition","subsenses","subsense","pronunciation","audioFile","phoneticSpelling","giftsRouter","giftsProductsRouter","GetProduct","GetCategories","AddCategory","delete","DeleteCategory","GetSamplesOfCategories","GetProductsByCategory","AddProduct","put","UpdateProduct","DeleteProduct","globalCategories","globalSamplesOfCategories","GetCategoriesByLevel","level","GetCategoriesFromDb","returnCategories","forEach","cat","category","match","RegExp","sort","errMsg","GetSamples","dbCollection","aggregate","$sort","$group","products","img","$project","$slice","categories","docs","regex","price","color","packaging","material","size","note","retailer","giftsOrdersRouter","staff","sendStatus","new_status","sno","order_no","now","includes","mobile","company","mobile2","addr","new_sale_price","new_qty","giftsUsersRouter","GetCart","AddToCart","DeleteCart","UpdateCartQty","DeleteInCart","CartCheckout","cart","productId","quantity","customer","address","total","bMember","NewOrder","orderId","error","dbOrders","insertRslt","created_on","shipping","payment","method","transaction_id","giftsStaffsRouter","httpRouter","Delete","Get","Post","Put","querys","queryValue","transporter","createTransport","host","secure","auth","pass","mailOptions","from","to","subject","html","sendMail"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = require(\"express\");","import { MongoClient, Db, ObjectID } from 'mongodb';\r\n\r\nconst MONGO_URL =\r\n  'mongodb+srv://admin:admin@cluster0-dxwkg.mongodb.net/insg?retryWrites=true';\r\n\r\nlet database: Db;\r\n\r\nasync function InitDb(): Promise<Db> {\r\n  try {\r\n    const client = await MongoClient.connect(MONGO_URL, {\r\n      useNewUrlParser: true\r\n    });\r\n    return (database = client.db('insg'));\r\n  } catch (e) {\r\n    throw 'Database connection failed.';\r\n  }\r\n}\r\n\r\nasync function MongoDb(): Promise<Db> {\r\n  if (database) {\r\n    return database;\r\n  }\r\n\r\n  try {\r\n    await InitDb();\r\n    return database;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nasync function DbCollection(name: string) {\r\n  if (database) {\r\n    return database.collection(name);\r\n  }\r\n\r\n  try {\r\n    await InitDb();\r\n    return database.collection(name);\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport { DbCollection, MongoDb, ObjectID };\r\n","module.exports = require(\"axios\");","const ltaAccountKey = '6sVzf9zXRaCgkJUdjxIw2A==';\r\n\r\nconst busArrivalUrl =\r\n  'http://datamall2.mytransport.sg/ltaodataservice/BusArrivalv2';\r\nconst busStopsUrl = 'http://datamall2.mytransport.sg/ltaodataservice/BusStops';\r\n\r\nconst headerConfig = {\r\n  headers: {\r\n    AccountKey: ltaAccountKey\r\n  }\r\n};\r\n\r\nexport { busArrivalUrl, busStopsUrl, headerConfig };\r\n","import Axios from 'axios';\r\n\r\nimport { Response } from '../interface';\r\nimport { busStopsUrl, headerConfig } from './lta';\r\nimport { BusStopInfo } from './bus-stops-interface';\r\n\r\nlet busStops: BusStopInfo[] = [];\r\n\r\nasync function getBusStopsFromLta(skip?: number): Promise<BusStopInfo[]> {\r\n  try {\r\n    let url = busStopsUrl;\r\n    if (skip) {\r\n      url += `?$skip=${skip}`;\r\n    }\r\n    let response = await Axios.get(url, headerConfig);\r\n    if (response.status != 200) {\r\n      throw { status: response.status };\r\n    }\r\n    return response.data.value;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nasync function getAllBusStops() {\r\n  try {\r\n    let skip = 0;\r\n    let newBusStops: BusStopInfo[] = [];\r\n    do {\r\n      newBusStops = await getBusStopsFromLta(skip);\r\n      let temp = busStops;\r\n      busStops = temp.concat(newBusStops);\r\n      skip += 500;\r\n    } while (newBusStops.length === 500);\r\n  } catch (e) {\r\n    busStops = [];\r\n    getAllBusStops();\r\n  }\r\n}\r\ngetAllBusStops();\r\n\r\nfunction checkBusStopLocally(busStopCode: string) {\r\n  if (!busStopCode) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    if (busStopCode === busStops[i].BusStopCode) {\r\n      return busStops[i];\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getBusStopInfo(busStopCode: string, res: Response) {\r\n  if (!busStopCode) {\r\n    return res.status(400).send('Invalid Bus Stop Code.');\r\n  }\r\n  let busStopInfo = checkBusStopLocally(busStopCode);\r\n  if (busStopInfo) {\r\n    return res.status(200).send(busStopInfo);\r\n  }\r\n  return res.status(400).send('Bus Stop Info not found.');\r\n}\r\n\r\nfunction getNearbyBusStops(latitude: number, longitude: number, res: Response) {\r\n  if (latitude === undefined || longitude === undefined) {\r\n    return res.status(400).send('Invalid coordinates.');\r\n  }\r\n\r\n  let nearbyStops = [];\r\n  const R = 6371e3;\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    let dLat = ((busStops[i].Latitude - latitude) * Math.PI) / 180;\r\n    let dLong = ((busStops[i].Longitude - longitude) * Math.PI) / 180;\r\n\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((busStops[i].Latitude * Math.PI) / 180) *\r\n        Math.cos((latitude * Math.PI) / 180) *\r\n        Math.sin(dLong / 2) *\r\n        Math.sin(dLong / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let dist = R * c;\r\n    if (Math.abs(dist) < 280) {\r\n      nearbyStops.push(busStops[i]);\r\n    }\r\n  }\r\n  res.status(200).send(nearbyStops);\r\n}\r\n\r\nexport { busStops, checkBusStopLocally, getBusStopInfo, getNearbyBusStops };\r\n","import { Response } from '../interface';\r\nimport { DbCollection, ObjectID } from '../mongodb-ops';\r\n\r\nasync function GetInventory(res: Response) {\r\n  try {\r\n    const dbInventory = await DbCollection('gifts-inventory');\r\n    const inventory = await dbInventory.find().toArray();\r\n    return res.status(200).send(inventory);\r\n  } catch (e) {\r\n    return res.status(500).send(e.message);\r\n  }\r\n}\r\n\r\n// qty by product; Todo: by colour, size, etc.\r\nasync function AdjustInventory(_id: string, qty: number, res: Response) {\r\n  if (!_id || !qty) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n  try {\r\n    const dbInventory = await DbCollection('gifts-inventory');\r\n    const rslt = await dbInventory.updateOne(\r\n      {\r\n        _id: new ObjectID(_id)\r\n      },\r\n      { $set: { modifiedOn: new Date(), qty: qty } },\r\n      { upsert: true }\r\n    );\r\n    return res.status(200).send(rslt);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function ReserveInventory(id: string, cartItems: any) {\r\n  if (!cartItems || cartItems.length <= 0) {\r\n    throw 'The cart is empty.';\r\n  }\r\n\r\n  try {\r\n    const success = [];\r\n    const failed = [];\r\n\r\n    const dbInventory = await DbCollection('gifts-inventory');\r\n    for (let i = 0; i < cartItems.length; i++) {\r\n      const result = await dbInventory.updateOne(\r\n        {\r\n          _id: new ObjectID(cartItems[i].product._id),\r\n          qty: { $gte: cartItems[i].qty }\r\n        },\r\n        {\r\n          $inc: { qty: -cartItems[i].qty },\r\n          $push: {\r\n            reservations: {\r\n              qty: cartItems[i].qty,\r\n              _id: new ObjectID(id),\r\n              createdOn: new Date()\r\n            }\r\n          }\r\n        }\r\n      );\r\n      if (result.result.nModified === 0) {\r\n        failed.push(cartItems[i].product);\r\n        break;\r\n      } else {\r\n        success.push(cartItems[i].product);\r\n      }\r\n    }\r\n\r\n    if (failed.length > 0) {\r\n      for (let i = 0; i < success.length; i++) {\r\n        dbInventory.updateOne(\r\n          {\r\n            _id: success[i]._id,\r\n            'reservations._id': id\r\n          },\r\n          {\r\n            $inc: { qty: success[i].qty },\r\n            $pull: { reservations: { _id: id } }\r\n          }\r\n        );\r\n      }\r\n      throw 'Not enough storage.';\r\n    }\r\n    return 'Success.';\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nasync function DeleteInventoryReservation(_id: string) {\r\n  try {\r\n    const dbInventory = await DbCollection('gifts-inventory');\r\n    let updateRslt = await dbInventory.updateOne(\r\n      {\r\n        'reservations._id': new ObjectID(_id)\r\n      },\r\n      {\r\n        $pull: { reservations: { _id: new ObjectID(_id) } }\r\n      }\r\n    );\r\n    if (updateRslt.result.nModified <= 0) {\r\n      throw 'delete reservation failed.';\r\n    }\r\n    return updateRslt;\r\n  } catch (e) {\r\n    console.log(e);\r\n    throw 'delete reservation failed with exception.';\r\n  }\r\n}\r\n\r\nexport {\r\n  AdjustInventory,\r\n  DeleteInventoryReservation,\r\n  GetInventory,\r\n  ReserveInventory\r\n};\r\n","import { DbCollection, MongoDb, ObjectID } from '../mongodb-ops';\r\nimport { Request, Response } from '../interface';\r\nimport { encrypt } from '../string-ops';\r\n\r\n(async () => {\r\n  const db = await DbCollection('gifts-users');\r\n  db.createIndex('uid', { unique: true });\r\n})();\r\n\r\nasync function Login(req: Request, res: Response) {\r\n  if (req.session && req.session.user) {\r\n    return res.status(200).send({ uid: req.session.user.uid });\r\n  }\r\n  try {\r\n    let dbUsers = await DbCollection('gifts-users');\r\n    req.session.user = await dbUsers.findOne({\r\n      uid: req.body.uid,\r\n      pwd: encrypt(req.body.pwd)\r\n    });\r\n    if (!req.session.user) {\r\n      return res.status(403).send('Incorrect username or password');\r\n    }\r\n    return res.status(200).send({ uid: req.session.user.uid });\r\n  } catch (e) {\r\n    return res.status(500).send('server error.');\r\n  }\r\n}\r\n\r\nfunction Logout(req: Request, res: Response) {\r\n  if (req.session && req.session.user) {\r\n    req.session.user = null;\r\n  }\r\n  return res.status(200).send({ result: 'ok' });\r\n}\r\n\r\nasync function Register(req: Request, res: Response) {\r\n  if (\r\n    !req.body.uid ||\r\n    !req.body.pwd ||\r\n    !req.body.email ||\r\n    !req.body.firstName ||\r\n    !req.body.lastName\r\n  ) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n  try {\r\n    let dbUsers = await DbCollection('gifts-users');\r\n    let rslt = await dbUsers.insertOne({\r\n      uid: req.body.uid,\r\n      pwd: encrypt(req.body.pwd),\r\n      email: req.body.email,\r\n      firstName: req.body.firstName,\r\n      lastName: req.body.lastName,\r\n      createdOn: new Date()\r\n    });\r\n    if (rslt.insertedCount === 1) {\r\n      return res.status(200).send(rslt.ops[0]);\r\n    } else {\r\n      return res.status(500).send('Register failed. Please try again later.');\r\n    }\r\n  } catch (e) {\r\n    // console.log(e);\r\n    return res.status(500).send('Register failed. Please try again later.');\r\n  }\r\n}\r\n\r\nasync function DeleteUser(session: any, res: Response) {\r\n  if (!session || !session.user) {\r\n    return res.status(403).send('Login is required.');\r\n  }\r\n  try {\r\n    let db = await MongoDb();\r\n    db.collection('gifts-users').deleteOne({\r\n      _id: session.user._id\r\n    });\r\n    session.user = null;\r\n    return res.status(200).send({ result: 'User deleted.' });\r\n  } catch (e) {\r\n    return res.status(400).send(e);\r\n  }\r\n}\r\n\r\nfunction UserInfo(session: any, res) {\r\n  if (!bLogin(session)) {\r\n    return res.status(403).send('User Not login.');\r\n  }\r\n  return res.status(200).send({\r\n    _id: session.user._id,\r\n    uid: session.user.uid,\r\n    email: session.user.email\r\n  });\r\n}\r\n\r\nfunction bLogin(session: any) {\r\n  if (!session || !session.user) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport { bLogin, Login, Logout, Register, DeleteUser, UserInfo };\r\n","import * as crypto from 'crypto';\r\n\r\nconst algorithm = 'aes-192-cbc';\r\nconst password = 'inSGyc83';\r\nconst key = crypto.scryptSync(password, 'salt', 24);\r\nconst iv = Buffer.alloc(16, 0);\r\n\r\nfunction encrypt(text: string): string {\r\n  try {\r\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\r\n    let crypted: string = cipher.update(text, 'utf8', 'hex');\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n  } catch (e) {\r\n    // console.log('encrypt => ', e);\r\n  }\r\n}\r\n\r\nfunction decrypt(text: string): string {\r\n  try {\r\n    let decipher = crypto.createDecipheriv(algorithm, key, iv);\r\n    let dec: string = decipher.update(text, 'hex', 'utf8');\r\n    dec += decipher.final('utf8');\r\n    return dec;\r\n  } catch (e) {\r\n    // console.log('decrypt => ', e);\r\n  }\r\n}\r\n\r\n/*\r\n * string operation\r\n */\r\nenum RandomTypes {\r\n  Capital,\r\n  Number,\r\n  String\r\n}\r\n\r\n// return string of random numbers with specified length.\r\nfunction randomNumber(length: number): string {\r\n  return random(RandomTypes.Number, length);\r\n}\r\n\r\n// return string of random capital characters with specified length.\r\nfunction randomCapitals(length: number): string {\r\n  return random(RandomTypes.Capital, length);\r\n}\r\n\r\n// return string of random characters or numbers with specified length.\r\nfunction randomString(length: number): string {\r\n  return random(RandomTypes.String, length);\r\n}\r\n\r\nfunction random(type: RandomTypes, length: number): string {\r\n  let rString: string = '';\r\n  if (type === RandomTypes.String) {\r\n    rString = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  } else if (type === RandomTypes.Number) {\r\n    rString = '0123456789';\r\n  } else if (type === RandomTypes.Capital) {\r\n    rString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  } else {\r\n    return '';\r\n  }\r\n\r\n  let result: string = '';\r\n  for (let i = length; i > 0; --i) {\r\n    result += rString[Math.floor(Math.random() * rString.length)];\r\n  }\r\n  return result;\r\n}\r\n\r\nexport {\r\n  encrypt,\r\n  decrypt,\r\n  randomCapitals,\r\n  randomNumber,\r\n  randomString,\r\n  RandomTypes\r\n};\r\n","import * as express from 'express';\r\nimport * as session from 'express-session';\r\nimport { join } from 'path';\r\nimport * as cors from 'cors';\r\nimport * as bodyParser from 'body-parser';\r\n\r\nimport { Request, Response, NextFunction } from './interface';\r\nimport apiRouter from './router/api-router';\r\nimport { randomString } from './string-ops/random';\r\n\r\n// Express server\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\napp.use(\r\n  session({\r\n    secret: randomString(20),\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: {\r\n      maxAge: 1000 * 60 * 60 * 24 // millseconds of 24hrs  }\r\n    }\r\n  })\r\n);\r\n\r\napp.use('/api', apiRouter);\r\n\r\napp.get('/', (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, '/client/index.html'));\r\n});\r\n\r\n// Server static files from /client\r\napp.use(express.static(join(__dirname, '/client')));\r\napp.use(\r\n  express.static(join(__dirname, '/client/assets'), { dotfiles: 'allow' })\r\n);\r\n\r\n// error handling - 1\r\napp.all('/*', (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, '/client/index.html'));\r\n});\r\n// error handling - 2\r\napp.use((req: Request, res: Response, next: NextFunction) => {\r\n  return res.status(500).send('Issue happened. Please retry later!');\r\n});\r\n\r\napp.listen(8080, () => {\r\n  console.log('App listening on port 8080.');\r\n});\r\n","module.exports = require(\"express-session\");","module.exports = require(\"path\");","module.exports = require(\"cors\");","module.exports = require(\"body-parser\");","import { Router } from 'express';\r\nimport { Request, Response } from '../interface';\r\n\r\nimport { busRouter } from './lta';\r\nimport dictionaryRouter from './dictionary';\r\nimport giftsRouter from './gifts';\r\nimport httpRouter from './http-request';\r\nimport SendEmail from '../email/email.ops';\r\n\r\nconst apiRouter = Router();\r\n\r\n// url: /api\r\napiRouter.use('/lta/bus', busRouter);\r\napiRouter.use('/dictionary', dictionaryRouter);\r\napiRouter.use('/gifts', giftsRouter);\r\napiRouter.use('/http', httpRouter);\r\n\r\n// msg from users; forward it via nodemailer.\r\napiRouter.post('/msg', (req: Request, res: Response) => {\r\n  SendEmail(req.body, res);\r\n});\r\n\r\n// error handling\r\napiRouter.all('/*', (req: Request, res: Response) => {\r\n  return res.status(400).send('Invalid Request');\r\n});\r\n\r\nexport default apiRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport getBusArrival from '../lta/bus-arrival';\r\nimport { getBusStopInfo, getNearbyBusStops } from '../lta/bus-stops';\r\n\r\n// url: /api/lta/bus\r\nconst busRouter = Router();\r\n\r\nbusRouter.get('/busArrival/:busStopCode', (req: Request, res: Response) => {\r\n  getBusArrival(req.params.busStopCode, res);\r\n});\r\n\r\nbusRouter.get('/busStop/:busStopCode', (req: Request, res: Response) => {\r\n  getBusStopInfo(req.params.busStopCode, res);\r\n});\r\n\r\nbusRouter.get('/nearbyBusStops', (req: Request, res: Response) => {\r\n  getNearbyBusStops(req.query.latitude, req.query.longitude, res);\r\n});\r\n\r\nexport { busRouter };\r\n","import Axios from 'axios';\r\n\r\nimport { Response } from '../interface';\r\nimport { busArrivalUrl, headerConfig } from './lta';\r\nimport { checkBusStopLocally } from './bus-stops';\r\n\r\nfunction getBusArrival(busStopCode: string, res: Response) {\r\n  busStopCode = busStopCode.trim();\r\n  if (!busStopCode) {\r\n    return res.status(400).send('Invalid BusStopCode.');\r\n  }\r\n\r\n  let busStopInfo = checkBusStopLocally(busStopCode);\r\n  if (!busStopInfo) {\r\n    return res.status(400).send('Bus Stop not found.');\r\n  }\r\n\r\n  let url = `${busArrivalUrl}?BusStopCode=${busStopCode}`;\r\n  Axios.get(url, headerConfig)\r\n    .then(respose => {\r\n      res\r\n        .status(200)\r\n        .send({ busStopInfo: busStopInfo, busArrival: respose.data });\r\n    })\r\n    .catch(e => {\r\n      res.status(400).send(e);\r\n    });\r\n}\r\n\r\nexport default getBusArrival;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport CheckOxfordEntries from '../dictionary/dictionary';\r\n\r\nconst dictionaryRouter = Router();\r\n// const lunchfunRouter = Router();\r\n\r\ndictionaryRouter.get('/oxford/:word', (req: Request, res: Response) => {\r\n  CheckOxfordEntries(req.params.word, res);\r\n});\r\n\r\n// lunchfunRouter.get('/pals', (req: Request, res: Response) => {\r\n//   GetPals(res);\r\n// });\r\n// lunchfunRouter.post('/pal', (req: Request, res: Response) => {\r\n//   AddPal(req.body.name, res);\r\n// });\r\n// lunchfunRouter.delete('/pal', (req: Request, res: Response) => {\r\n//   DeletePal(req.query, res);\r\n// });\r\n\r\n// lunchfunRouter.get('/records', (req: Request, res: Response) => {\r\n//   GetRecords(res);\r\n// });\r\n// lunchfunRouter.post('/record', (req: Request, res: Response) => {\r\n//   AddRecord(req.body.payer, req.body.attendees, res);\r\n// });\r\n// lunchfunRouter.delete('/record', (req: Request, res: Response) => {\r\n//   DeleteRecord(req.query._id, res);\r\n// });\r\n\r\n// lunchfunRouter.get('/stats/attendance', (req: Request, res: Response) => {\r\n//   GetPalsAttendance(res);\r\n// });\r\n\r\nexport default dictionaryRouter;\r\n","import Axios from 'axios';\r\nimport { Response } from '../interface';\r\nimport {\r\n  CheckEntriesResult,\r\n  OxfordEntries,\r\n  OxfordLemmas\r\n} from './oxford-interface';\r\n\r\nconst app_id: string = '0314e9e2';\r\nconst app_key: string = '5a6c2589474a2f83ccd69f397bfec7a2';\r\nconst config = {\r\n  headers: {\r\n    app_id: app_id,\r\n    app_key: app_key\r\n  }\r\n};\r\n\r\nasync function CheckOxfordEntries(word: string, res: Response) {\r\n  if (!word || !word.trim()) {\r\n    return res.status(400).send('Invalid word.');\r\n  }\r\n  word = word.trim().toLowerCase();\r\n\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/entries/en-gb/' +\r\n    word +\r\n    '?fields=definitions%2Cpronunciations';\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    let entries: OxfordEntries = resp.data;\r\n    let return_result: CheckEntriesResult = { lexicalEntries: [] };\r\n    for (let result of entries.results) {\r\n      for (let lexicalEntry of result.lexicalEntries) {\r\n        let new_lexicalEntry = {\r\n          entries: [],\r\n          lexicalCategory: '',\r\n          pronunciations: []\r\n        };\r\n        return_result.lexicalEntries.push(new_lexicalEntry);\r\n\r\n        if (lexicalEntry.lexicalCategory) {\r\n          new_lexicalEntry.lexicalCategory = lexicalEntry.lexicalCategory.text;\r\n        }\r\n        for (let entry of lexicalEntry.entries) {\r\n          for (let sense of entry.senses) {\r\n            for (let definition of sense.definitions || []) {\r\n              new_lexicalEntry.entries.push(definition);\r\n            }\r\n\r\n            for (let subsense of sense.subsenses || []) {\r\n              for (let definition of subsense.definitions) {\r\n                new_lexicalEntry.entries.push(definition);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let pronunciation of lexicalEntry.pronunciations) {\r\n          new_lexicalEntry.pronunciations.push({\r\n            audioFile: pronunciation.audioFile,\r\n            phoneticSpelling: pronunciation.phoneticSpelling\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return res.status(200).send(return_result);\r\n  } catch (e) {\r\n    return res.status(400).send(e.message);\r\n  }\r\n}\r\n\r\nasync function CheckOxfordLemmas(word: string) {\r\n  if (!word || !word.trim()) {\r\n    return 'Invalid word.';\r\n  }\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/lemmas/en-gb/' + word;\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    const lemmas: OxfordLemmas = resp.data;\r\n    let return_result = [];\r\n    lemmas.results.forEach(result => {\r\n      result.lexicalEntries.forEach(lexicalEntry => {\r\n        lexicalEntry.inflectionOf.forEach(inflection => {\r\n          return_result.push(inflection);\r\n        });\r\n      });\r\n    });\r\n    return return_result;\r\n  } catch (e) {\r\n    return e.message;\r\n  }\r\n}\r\n\r\nCheckOxfordEntries('check', undefined);\r\n\r\nexport default CheckOxfordEntries;\r\n","import { Router } from 'express';\r\n\r\nimport giftsProductsRouter from './gifts-products';\r\nimport giftsOrdersRouter from './gifts-orders';\r\nimport giftsUsersRouter from './gifts-users';\r\nimport giftsStaffsRouter from './gifts-staffs';\r\n\r\nconst giftsRouter = Router();\r\n\r\n// url: /api/gifts\r\ngiftsRouter.use('/products', giftsProductsRouter);\r\ngiftsRouter.use('/orders', giftsOrdersRouter);\r\ngiftsRouter.use('/users', giftsUsersRouter);\r\ngiftsRouter.use('/staffs', giftsStaffsRouter);\r\n\r\nexport default giftsRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  AddCategory,\r\n  DeleteCategory,\r\n  GetCategories,\r\n  GetSamplesOfCategories\r\n} from '../gifts-products/gifts-products-categories.ops';\r\nimport {\r\n  AddProduct,\r\n  DeleteProduct,\r\n  GetProduct,\r\n  GetProductsByCategory,\r\n  UpdateProduct\r\n} from '../gifts-products/gifts-products.ops';\r\nimport {\r\n  AdjustInventory,\r\n  GetInventory\r\n} from '../gifts-products/gifts-products-inventory.ops';\r\n\r\nconst giftsProductsRouter = Router();\r\n\r\ngiftsProductsRouter.get('/view/:product_no', (req, res) => {\r\n  GetProduct(req.params, res);\r\n});\r\n\r\n/*\r\n * inquiry: /api/gifts/products\r\n */\r\ngiftsProductsRouter.get('/categories', (req: Request, res: Response) => {\r\n  GetCategories(res);\r\n});\r\ngiftsProductsRouter.post('/category', (req: Request, res: Response) => {\r\n  AddCategory(req.body, res);\r\n});\r\ngiftsProductsRouter.delete('/category', (req: Request, res: Response) => {\r\n  DeleteCategory(req.query, res);\r\n});\r\n\r\ngiftsProductsRouter.get('/samples', (req: Request, res: Response) => {\r\n  GetSamplesOfCategories(res);\r\n});\r\ngiftsProductsRouter.get('', (req: Request, res: Response) => {\r\n  GetProductsByCategory(req, res);\r\n});\r\ngiftsProductsRouter.get('/product', (req: Request, res: Response) => {\r\n  GetProduct(req.query, res);\r\n});\r\ngiftsProductsRouter.post('/product', (req: Request, res: Response) => {\r\n  AddProduct(req.body, res);\r\n});\r\ngiftsProductsRouter.put('/product', (req: Request, res: Response) => {\r\n  UpdateProduct(req.body, res);\r\n});\r\ngiftsProductsRouter.delete('/product', (req: Request, res: Response) => {\r\n  DeleteProduct(req.query, res);\r\n});\r\n\r\ngiftsProductsRouter.get('/inventory', (req, res) => {\r\n  GetInventory(res);\r\n});\r\ngiftsProductsRouter.put('/inventory', (req, res) => {\r\n  AdjustInventory(req.body._id, req.body.qty, res);\r\n});\r\n\r\nexport default giftsProductsRouter;\r\n","import { Response } from '../interface';\r\nimport { ObjectID, DbCollection } from '../mongodb-ops';\r\n\r\nlet globalCategories = [];\r\nlet globalSamplesOfCategories = [];\r\n\r\nasync function GetCategories(res: Response) {\r\n  try {\r\n    const categories = await GetCategoriesByLevel(0);\r\n    return res.status(200).send(categories);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetSamplesOfCategories(res: Response) {\r\n  if (globalSamplesOfCategories.length > 0) {\r\n    return res.status(200).send(globalSamplesOfCategories);\r\n  }\r\n  try {\r\n    globalSamplesOfCategories = await GetSamples();\r\n    return res.status(200).send(globalSamplesOfCategories);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function AddCategory(body: any, res: Response) {\r\n  if (!body.name || !body.category) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const dbCollection = await DbCollection('gifts-products-catalog');\r\n    await dbCollection.insertOne({ name: body.name, category: body.category });\r\n    globalCategories = [];\r\n    globalSamplesOfCategories = [];\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteCategory(query: any, res: Response) {\r\n  if (!query._id) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const dbCollection = await DbCollection('gifts-products-catalog');\r\n    await dbCollection.deleteOne({ _id: new ObjectID(query._id) });\r\n    globalCategories = [];\r\n    globalSamplesOfCategories = [];\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\n// @level:\r\n// 0 - all;  1 - 1st level;  2 - 2nd and above levels\r\nasync function GetCategoriesByLevel(level: number) {\r\n  if (globalCategories.length <= 0) {\r\n    try {\r\n      globalCategories = await GetCategoriesFromDb();\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  if (level === 0) {\r\n    return globalCategories;\r\n  }\r\n  const returnCategories = [];\r\n  globalCategories.forEach(cat => {\r\n    console.log(cat.category.match(new RegExp('/', 'g')));\r\n    if (cat.category.match(new RegExp('/', 'g')).length <= level) {\r\n      returnCategories.push(cat);\r\n    }\r\n  });\r\n  return returnCategories;\r\n}\r\n\r\nasync function GetCategoriesFromDb() {\r\n  try {\r\n    const dbCollection = await DbCollection('gifts-products-catalog');\r\n    globalCategories = await dbCollection\r\n      .find()\r\n      .sort('category', 1)\r\n      .toArray();\r\n    return globalCategories;\r\n  } catch (e) {\r\n    throw { errMsg: 'Get categories from database failed.' };\r\n  }\r\n}\r\n\r\nasync function GetSamples() {\r\n  try {\r\n    const dbCollection = await DbCollection('gifts-products');\r\n    let docs = null;\r\n    docs = await dbCollection\r\n      .aggregate([\r\n        { $sort: { _id: -1 } },\r\n        {\r\n          $group: {\r\n            _id: { category: '$category' },\r\n            products: {\r\n              $push: {\r\n                _id: '$_id',\r\n                category: '$category',\r\n                img: '$img'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        {\r\n          $project: {\r\n            _id: '$_id',\r\n            products: {\r\n              $slice: [\r\n                '$products',\r\n                4 // max number of elements returned from the start of the array\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      ])\r\n      .toArray();\r\n    return docs;\r\n  } catch (e) {\r\n    console.log(e);\r\n    return { errMsg: 'Get products failed.' };\r\n  }\r\n}\r\n\r\nexport { AddCategory, DeleteCategory, GetCategories, GetSamplesOfCategories };\r\n","module.exports = require(\"mongodb\");","import { DbCollection, MongoDb, ObjectID } from '../mongodb-ops';\r\nimport { Request, Response } from '../interface';\r\n\r\nasync function GetProduct(params: any, res: Response) {\r\n  if (!params._id) {\r\n    return res.status(400).send('Invalid product no.');\r\n  }\r\n\r\n  try {\r\n    const db = await MongoDb();\r\n    const product = await db\r\n      .collection('gifts-products')\r\n      .findOne({ _id: new ObjectID(params._id) });\r\n    return res.status(200).send(product);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetProductsByCategory(req: Request, res: Response) {\r\n  try {\r\n    const dbCollection = await DbCollection('gifts-products');\r\n    let docs = null;\r\n    if (req.query.category) {\r\n      const regex = new RegExp(['^', req.query.category.trim()].join(''), 'i');\r\n      docs = await dbCollection.find({ category: regex }).toArray();\r\n    } else {\r\n      docs = await dbCollection.find().toArray();\r\n    }\r\n    return res.status(200).send(docs);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function AddProduct(body: any, res: Response) {\r\n  if (!body.name) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const db = await MongoDb();\r\n    await db.collection('gifts-products').insertOne({\r\n      name: body.name,\r\n      img: body.img,\r\n      price: body.price,\r\n      category: body.category,\r\n      color: body.color,\r\n      packaging: body.packaging,\r\n      material: body.material,\r\n      size: body.size,\r\n      note: body.note,\r\n      retailer: body.retailer,\r\n      createdOn: new Date()\r\n    });\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function UpdateProduct(body: any, res: Response) {\r\n  if (!body._id) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const dbProducts = await DbCollection('gifts-products');\r\n    await dbProducts.updateOne(\r\n      { _id: new ObjectID(body._id) },\r\n      {\r\n        $set: {\r\n          modifiedOn: new Date(),\r\n          name: body.name,\r\n          img: body.img,\r\n          price: body.price,\r\n          category: body.category,\r\n          color: body.color,\r\n          packaging: body.packaging,\r\n          material: body.material,\r\n          size: body.size,\r\n          note: body.note,\r\n          retailer: body.retailer\r\n        }\r\n      }\r\n    );\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteProduct(query: any, res: Response) {\r\n  if (!query._id) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const db = await MongoDb();\r\n    await db\r\n      .collection('gifts-products')\r\n      .deleteOne({ _id: new ObjectID(query._id) });\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nexport {\r\n  AddProduct,\r\n  DeleteProduct,\r\n  GetProductsByCategory,\r\n  GetProduct,\r\n  UpdateProduct\r\n};\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\n\r\nconst giftsOrdersRouter = Router();\r\n\r\n// order list with order_no, status & staff id to follow-up.\r\ngiftsOrdersRouter.get('/allOrders', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff) {\r\n    return res.sendStatus(401);\r\n  }\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\n// update order status by staff follow-up.\r\ngiftsOrdersRouter.put('/updateStatus', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n  if (!req.body.new_status || !req.body.sno || !req.body.order_no) {\r\n    return res.status(400).send('Failed. Pleaes review inputs.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.order_no,\r\n    2: req.body.sno,\r\n    3: Date.now(),\r\n    4: req.session.staff.id,\r\n    5: req.body.new_status,\r\n    6: req.body.note || null\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\n// staff to update contact info of the order.\r\ngiftsOrdersRouter.put('/updateContact', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n  if (!req.body.order_no) {\r\n    return res.status(400).send('Order_no empty.');\r\n  } else if (\r\n    !req.body.email ||\r\n    !req.body.email.includes('@') ||\r\n    !req.body.email.includes('.') ||\r\n    req.body.email.includes('/') ||\r\n    req.body.email.includes('\\\\')\r\n  ) {\r\n    return res.status(400).send('Invalid email.');\r\n  } else if (!req.body.name) {\r\n    return res.status(400).send('Invalid name.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.name,\r\n    2: req.body.email,\r\n    3: req.body.mobile || null,\r\n    4: req.body.company || null,\r\n    5: req.body.mobile2 || null,\r\n    6: req.body.addr || null,\r\n    7: req.body.order_no\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\n// staff to change order details e.g. price, qty, in case users changed mind.\r\n// staff may change status of specific product of the order.\r\ngiftsOrdersRouter.put('/updateOrderItem', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n\r\n  if (!req.body.order_no) {\r\n    return res.status(400).send('Failed. Invalid Order No.');\r\n  }\r\n  if (!req.body.sno || req.body.sno === '') {\r\n    return res.status(400).send('Failed. Invalid Order Sno.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.new_sale_price,\r\n    2: req.body.new_qty,\r\n    3: req.body.new_status,\r\n    4: req.body.order_no,\r\n    5: req.body.sno\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\nexport default giftsOrdersRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  Login,\r\n  Logout,\r\n  Register,\r\n  DeleteUser,\r\n  UserInfo\r\n} from '../gifts-users/gifts-users.ops';\r\nimport {\r\n  AddToCart,\r\n  CartCheckout,\r\n  DeleteCart,\r\n  DeleteInCart,\r\n  GetCart,\r\n  UpdateCartQty\r\n} from '../gifts-users/gifts-carts.ops';\r\n\r\nconst giftsUsersRouter = Router();\r\n\r\n// url: /api/gifts/users/\r\ngiftsUsersRouter.post('/login', (req: Request, res: Response) => {\r\n  Login(req, res);\r\n});\r\ngiftsUsersRouter.get('/info', (req: Request, res: Response) => {\r\n  UserInfo(req.session, res);\r\n});\r\ngiftsUsersRouter.get('/logout', (req: Request, res: Response) => {\r\n  Logout(req, res);\r\n});\r\ngiftsUsersRouter.post('/register', (req: Request, res: Response) => {\r\n  Register(req, res);\r\n});\r\ngiftsUsersRouter.delete('/deleteuser', (req: Request, res: Response) => {\r\n  DeleteUser(req.session, res);\r\n});\r\ngiftsUsersRouter.get('/cart', (req: Request, res: Response) => {\r\n  GetCart(req.session, res);\r\n});\r\ngiftsUsersRouter.post('/cart', (req: Request, res: Response) => {\r\n  AddToCart(req.session, req.body, res);\r\n});\r\ngiftsUsersRouter.delete('/cart', (req: Request, res: Response) => {\r\n  DeleteCart(req.session, res);\r\n});\r\ngiftsUsersRouter.put('/cart', (req: Request, res: Response) => {\r\n  UpdateCartQty(req, res);\r\n});\r\ngiftsUsersRouter.delete('/cart/product', (req: Request, res: Response) => {\r\n  DeleteInCart(req.session, req.query._id, res);\r\n});\r\ngiftsUsersRouter.post('/cart/checkout', (req: Request, res: Response) => {\r\n  CartCheckout(req, res);\r\n});\r\n\r\nexport default giftsUsersRouter;\r\n","module.exports = require(\"crypto\");","import { DbCollection, MongoDb, ObjectID } from '../mongodb-ops';\r\nimport { Request, Response } from '../interface';\r\nimport { randomString } from '../string-ops';\r\n\r\nimport { bLogin } from './gifts-users.ops';\r\nimport { CartItem } from './users-interface';\r\nimport {\r\n  DeleteInventoryReservation,\r\n  ReserveInventory\r\n} from '../gifts-products/gifts-products-inventory.ops';\r\nimport { NewOrder } from '../gifts-orders/gifts-orders.ops';\r\n\r\nasync function GetCart(session: any, res: Response) {\r\n  if (!bLogin(session)) {\r\n    return res.status(403).send('User not login');\r\n  }\r\n\r\n  try {\r\n    const db = await DbCollection('gifts-carts');\r\n    const cart = await db.findOne({ _id: new ObjectID(session.user._id) });\r\n    console.log(cart);\r\n    return res.status(200).send(cart);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function AddToCart(session: any, body: any, res: Response) {\r\n  if (!bLogin(session)) {\r\n    return res.status(403).send('User not login');\r\n  }\r\n\r\n  try {\r\n    const db = await DbCollection('gifts-carts');\r\n    let rslt = await db.updateOne(\r\n      { _id: new ObjectID(session.user._id) },\r\n      { $pull: { products: { productId: new ObjectID(body.product._id) } } }\r\n    );\r\n    rslt = await db.updateOne(\r\n      { _id: new ObjectID(session.user._id) },\r\n      {\r\n        $push: {\r\n          products: {\r\n            productId: new ObjectID(body.product._id),\r\n            quantity: body.qty,\r\n            name: body.product.name,\r\n            price: body.product.price\r\n          }\r\n        }\r\n      },\r\n      { upsert: true }\r\n    );\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function UpdateCartQty(req: Request, res: Response) {\r\n  if (!bLogin(req.session)) {\r\n    res.status(403).send('User not login.');\r\n  }\r\n  if (!req.body.productId || !req.body.qty) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n\r\n  try {\r\n    const db = await MongoDb();\r\n    const rslt = await db.collection('gifts-carts').updateOne(\r\n      {\r\n        _id: req.session.user._id,\r\n        'products.productId': req.body.productId\r\n      },\r\n      {\r\n        $set: {\r\n          'products.$.qty': req.body.qty,\r\n          modifiedOn: new Date()\r\n        }\r\n      }\r\n    );\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteCart(session: any, res: Response) {\r\n  if (!bLogin(session)) {\r\n    return res.status(400).send('User not login.');\r\n  }\r\n\r\n  try {\r\n    const db = await DbCollection('gifts-carts');\r\n    db.deleteOne({ _id: new ObjectID(session.user._id) });\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteInCart(session: any, _id: string, res: Response) {\r\n  if (!bLogin(session)) {\r\n    return res.status(400).send('User not login.');\r\n  }\r\n\r\n  try {\r\n    const db = await DbCollection('gifts-carts');\r\n    let rslt = await db.updateOne(\r\n      { _id: new ObjectID(session.user._id) },\r\n      { $pull: { products: { productId: new ObjectID(_id) } } }\r\n    );\r\n    return res.status(200).send({ result: 'ok' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function CartCheckout(req: Request, res: Response) {\r\n  if (\r\n    !req.body.cart ||\r\n    !req.body.cart.customer ||\r\n    !req.body.cart.customer.name ||\r\n    !req.body.cart.customer.mobile ||\r\n    !req.body.cart.customer.address\r\n  ) {\r\n    return res.status(400).send('Invalid customer information.');\r\n  }\r\n  if (req.body.cart.total <= 0) {\r\n    return res.status(400).send('No product to checkout.');\r\n  }\r\n\r\n  let bMember: boolean = bLogin(req.session);\r\n\r\n  let id = '';\r\n  if (bMember) {\r\n    id = req.session.user._id;\r\n  } else {\r\n    id = randomString(20);\r\n  }\r\n  const cartItems: CartItem[] = req.body.cart.cartItems;\r\n  const customer = req.body.cart.customer;\r\n\r\n  try {\r\n    // reserve inventory, it throw error in case of failure.\r\n    await ReserveInventory(id, cartItems);\r\n\r\n    let insertRslt = await NewOrder(customer, cartItems);\r\n    if (insertRslt.result.n <= 0) {\r\n      await DeleteInventoryReservation(id);\r\n      throw 'Create new order failed.';\r\n    }\r\n\r\n    let updateRslt = await DeleteInventoryReservation(id);\r\n    console.log(updateRslt);\r\n\r\n    if (bMember) {\r\n      const dbCarts = await DbCollection('gifts-carts');\r\n      let deleteRslt = await dbCarts.deleteOne({ _id: new ObjectID(id) });\r\n    }\r\n\r\n    return res.status(200).send({ orderId: id });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nexport {\r\n  AddToCart,\r\n  CartCheckout,\r\n  DeleteCart,\r\n  DeleteInCart,\r\n  GetCart,\r\n  UpdateCartQty\r\n};\r\n","import { Request, Response } from '../interface';\r\nimport { DbCollection, ObjectID } from '../mongodb-ops';\r\nimport { bLogin } from '../gifts-users/gifts-users.ops';\r\nimport { CartItem } from '../gifts-users/users-interface';\r\n\r\nasync function NewOrder(customer, cartItems: CartItem[]) {\r\n  try {\r\n    const dbOrders = await DbCollection('gifts-orders');\r\n    let insertRslt = dbOrders.insertOne({\r\n      created_on: new Date(),\r\n      shipping: {\r\n        name: customer.name,\r\n        mobile: customer.mobile,\r\n        address: customer.address,\r\n        message: customer.message\r\n      },\r\n      payment: { method: 'visa', transaction_id: '2312213312XXXTD' },\r\n      cartItems: cartItems\r\n    });\r\n    console.log('insertRslt: ', insertRslt);\r\n    return insertRslt;\r\n  } catch (e) {\r\n    throw 'create new order failed.';\r\n  }\r\n}\r\n// async function GetCart(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(403).send('User not login');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     let cart = await db\r\n//       .collection('gifts-carts')\r\n//       .find({ _id: req.session.user[0]._id })\r\n//       .toArray();\r\n\r\n//     return res.status(200).send(cart);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function UpdateCartQty(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     res.status(403).send('User not login.');\r\n//   }\r\n//   if (!req.body.productId || !req.body.quantity) {\r\n//     return res.status(400).send('Invalid input.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     let rslt = await db.collection('gifts-carts').updateOne(\r\n//       {\r\n//         _id: req.session.user[0]._id,\r\n//         'products.productId': req.body.productId\r\n//       },\r\n//       {\r\n//         $set: {\r\n//           'products.$.quantity': req.body.quantity,\r\n//           modifiedOn: new Date()\r\n//         }\r\n//       }\r\n//     );\r\n//     console.log(rslt);\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function DeleteCart(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db\r\n//       .collection('gifts-carts')\r\n//       .deleteOne({ _id: req.session.user[0]._id });\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function DeleteCartProduct(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db.collection('gifts-carts').updateOne(\r\n//       { _id: req.session.user[0]._id },\r\n//       {\r\n//         $set: { modifiedOn: new Date() },\r\n//         $pull: {\r\n//           products: {\r\n//             productId: req.body.productId,\r\n//             quantity: req.body.quantity\r\n//           }\r\n//         }\r\n//       }\r\n//     );\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function CartCheckout(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db.collection('gifts-carts').updateOne(\r\n//       { _id: req.session.user[0]._id },\r\n//       {\r\n//         $set: { modifiedOn: new Date() },\r\n//         $pull: {\r\n//           products: {\r\n//             productId: req.body.productId,\r\n//             quantity: req.body.quantity\r\n//           }\r\n//         }\r\n//       }\r\n//     );\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// export { DeleteCart, DeleteCartProduct, GetCart, UpdateCartQty };\r\nexport { NewOrder };\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\n\r\nconst giftsStaffsRouter = Router();\r\n\r\ngiftsStaffsRouter.post('/login', (req: Request, res: Response) => {\r\n  // Login(req, res);\r\n});\r\ngiftsStaffsRouter.get('/logout', (req: Request, res: Response) => {\r\n  // Logout(req, res);\r\n});\r\ngiftsStaffsRouter.post('/register', (req: Request, res: Response) => {\r\n  // Register(req, res);\r\n});\r\ngiftsStaffsRouter.delete('/deleteuser', (req: Request, res: Response) => {\r\n  // DeleteUser(req, res);\r\n});\r\n\r\nexport default giftsStaffsRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport { Delete, Get, Post, Put } from '../http-request/http-request';\r\n\r\nconst httpRouter = Router();\r\n\r\nhttpRouter.post('', (req: Request, res: Response) => {\r\n  if (req.body.type === 'DELETE') {\r\n    Delete(req.body, res);\r\n  } else if (req.body.type === 'GET') {\r\n    Get(req.body, res);\r\n  } else if (req.body.type === 'POST') {\r\n    Post(req.body, res);\r\n  } else if (req.body.type === 'PUT') {\r\n    Put(req.body, res);\r\n  }\r\n});\r\n\r\nexport default httpRouter;\r\n","import Axios from 'axios';\r\n\r\nimport { Request, Response } from '../interface';\r\n\r\nfunction Delete(body: any, res: Response) {\r\n  let url = body.url;\r\n  if (body.querys && body.querys.length > 0) {\r\n    url += '?';\r\n    for (let i = 0; i < body.querys.length; ++i) {\r\n      url += body.query[i];\r\n      url += '=';\r\n      url += body.queryValue[i];\r\n    }\r\n  }\r\n  Axios.delete(url)\r\n    .then(response => {\r\n      res.status(200).send(response);\r\n    })\r\n    .catch(e => {\r\n      res.status(400).send(e);\r\n    });\r\n}\r\nfunction Post(req: Request, res: Response) {\r\n  let headers = {};\r\n\r\n  return res.status(200).send(req);\r\n  let url: string = req.body.url;\r\n  if (req.body.headers) {\r\n    headers = {\r\n      headers: req.body.headers\r\n    };\r\n  }\r\n  if (req.body.parameters) {\r\n    url += '?';\r\n    for (let i = 0; i < req.body.parameters.length; ++i) {\r\n      url += req.body.parameters[i] + '=' + req.body.parameterValue[i] + '&';\r\n    }\r\n  }\r\n  Axios.get(url, headers).then(response => {\r\n    res.send(response.data);\r\n  });\r\n}\r\nfunction Put(req: Request, res: Response) {\r\n  Axios.put(req.body.url).then(response => {\r\n    res.send(response.data);\r\n  });\r\n}\r\nfunction Get(req: Request, res: Response) {\r\n  Axios.post(req.body.url).then(response => {\r\n    res.send(response.data);\r\n  });\r\n}\r\n\r\nexport { Delete, Get, Post, Put };\r\n","import { createTransport } from 'nodemailer';\r\n\r\nimport { Response } from '../interface';\r\n\r\nconst transporter = createTransport({\r\n  host: 'mail.insg.xyz',\r\n  secure: true,\r\n  auth: {\r\n    user: 'i@insg.xyz',\r\n    pass: 'pass1234'\r\n  }\r\n});\r\n\r\nconst mailOptions = {\r\n  from: 'i@insg.xyz',\r\n  to: 'seesea2@gmail.com',\r\n  subject: 'Hello',\r\n  text: 'This is email from InSG.xyz',\r\n  html: '<b>this is email from InSG.xyz</b>'\r\n};\r\n\r\nfunction SendEmail(body: any, res: Response) {\r\n  // const emailHtml: string =\r\n  //   '<!DOCTYPE html><head>' +\r\n  //   '<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"></head>' +\r\n  //   `<body><br><b>Message from User ${body.name}` +\r\n  //   ' :</b><br><br>' +\r\n  //   `<p><b>Email: </b> ${body.email}` +\r\n  //   '</p>' +\r\n  //   `<p><b>Mobile: </b> ${body.mobile}` +\r\n  //   '</p>' +\r\n  //   `<p><b>Message: </b> ${body.message}` +\r\n  //   '</p>' +\r\n  //   '</body></html>';\r\n\r\n  // mailOptions.subject = 'User Inquiry';\r\n  // mailOptions.html = emailHtml;\r\n  transporter.sendMail(mailOptions);\r\n  // return res.status(200).send({ result: 'ok' });\r\n}\r\n\r\nexport default SendEmail;\r\n","module.exports = require(\"nodemailer\");","/*\r\n * string operation\r\n */\r\nenum RandomTypes {\r\n  Capital,\r\n  Number,\r\n  String\r\n}\r\n\r\n// return string of random numbers with specified length.\r\nfunction randomNumber(length: number): string {\r\n  return random(RandomTypes.Number, length);\r\n}\r\n\r\n// return string of random capital characters with specified length.\r\nfunction randomCapitals(length: number): string {\r\n  return random(RandomTypes.Capital, length);\r\n}\r\n\r\n// return string of random characters or numbers with specified length.\r\nfunction randomString(length: number): string {\r\n  return random(RandomTypes.String, length);\r\n}\r\n\r\nfunction random(type: RandomTypes, length: number): string {\r\n  let rString: string = '';\r\n  switch (type) {\r\n    case RandomTypes.String: {\r\n      rString =\r\n        'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      break;\r\n    }\r\n    case RandomTypes.Number: {\r\n      rString = '0123456789';\r\n      break;\r\n    }\r\n    case RandomTypes.Capital: {\r\n      rString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      break;\r\n    }\r\n    default: {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  let result: string = '';\r\n  for (let i = length; i > 0; --i) {\r\n    result += rString[Math.floor(Math.random() * rString.length)];\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { randomCapitals, randomNumber, randomString };\r\n"],"sourceRoot":""}