{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"axios\"","webpack:///external \"path\"","webpack:///./account-keys.ts","webpack:///./server/lta/lta.ts","webpack:///./server/lta/bus-stops.ts","webpack:///./server/server.ts","webpack:///external \"express\"","webpack:///external \"cors\"","webpack:///external \"body-parser\"","webpack:///./server/dictionary/dictionary.ts","webpack:///./server/lta/bus-arrival.ts","webpack:///./server/scraper/scrape.ts","webpack:///external \"cheerio\"","webpack:///external \"cron\"","webpack:///./server/db-ops.ts","webpack:///external \"sqlite3\"","webpack:///./server/movies/movies.ts","webpack:///external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ltaAccountKey","oxford_app_id","oxford_app_key","busArrivalUrl","busStopsUrl","headerConfig","headers","AccountKey","busStops","getBusStopsFromLta","skip","url","response","status","data","checkBusStopLocally","busStopCode","length","BusStopCode","getAllBusStops","newBusStops","temp","concat","getBusStop","res","send","message","busStop","getNearbyBusStops","latitude","longitude","undefined","nearbyStops","dLat","Latitude","Math","PI","dLong","Longitude","sin","cos","dist","atan2","sqrt","abs","push","sort","a","b","app","express","use","cors","bodyParser","json","urlencoded","extended","req","params","word","query","wordsFrequence","wordsTotal","urlsScanned","urlsTotal","movieList","sendFile","join","__dirname","static","all","next","listen","console","log","config","app_id","app_key","trim","toLowerCase","resp","entries","return_result","lexicalEntries","results","result","lexicalEntry","new_lexicalEntry","lexicalCategory","pronunciations","text","entry","senses","sense","definitions","definition","subsenses","subsense","pronunciation","audioFile","phoneticSpelling","then","respose","busArrival","catch","e","dbRW","run","err","error","offset","sql","rows","dbClose","Date","row","qty","database","sqlite3","verbose","dbFile","Database","OPEN_READWRITE","OPEN_CREATE","close","readdir","files","rslt","forEach","file","extname"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,U,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,8ECAZ,EAAAC,cAAwB,2BAExB,EAAAC,cAAwB,WACxB,EAAAC,eAAyB,oC,8ECHtC,WAYS,EAAAC,cATP,+DASsB,EAAAC,YARJ,2DAEpB,IAAMC,EAAe,CACnBC,QAAS,CACPC,WAAY,EAAAP,gBAIqB,EAAAK,gB,68CCZrC,WAGA,OAGIG,EAAsB,GAE1B,SAAeC,EAAmBC,G,kGAMf,O,sBAJXC,EAAM,EAAAP,YACNM,IACFC,GAAO,UAAUD,GAEJ,GAAM,UAAM9B,IAAI+B,EAAK,EAAAN,e,OACpC,GAAuB,MADnBO,EAAW,UACFC,OACX,KAAM,CAAEA,OAAQD,EAASC,QAE3B,MAAO,CAAP,EAAOD,EAASE,KAAK9B,O,OAErB,M,iCAqBJ,SAAS+B,EAAoBC,GAC3B,GAAKA,EAGL,IAAK,IAAIjD,EAAI,EAAGA,EAAIyC,EAASS,OAAQlD,IACnC,GAAIiD,IAAgBR,EAASzC,GAAGmD,YAC9B,OAAOV,EAASzC,GAoDb,EAAAyC,WA3ET,SAAeW,I,0HAEPT,EAAO,EACPU,EAAyB,G,iBAEb,SAAMX,EAAmBC,I,OAAvCU,EAAc,SACVC,EAAOb,EACX,EAAAA,WAAWa,EAAKC,OAAOF,GACvBV,GAAQ,I,oBACsB,MAAvBU,EAAYH,OAAc,Y,oDAEnC,EAAAT,WAAW,GACXW,I,8BAGJA,GA4DmB,EAAAJ,sBAAqB,EAAAQ,WA9CxC,SAAoBP,EAAqBQ,GACvC,IAAKR,EACH,OAAOQ,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,2BAEzC,IAAIC,EAAUZ,EAAoBC,GAClC,OAAIW,EACKH,EAAIX,OAAO,KAAKY,KAAKE,GAEvBH,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,8BAsCW,EAAAE,kBAnCpD,SAA2BC,EAAkBC,EAAmBN,GAC9D,QAAiBO,IAAbF,QAAwCE,IAAdD,EAC5B,OAAON,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,yBAKzC,IAFA,IAAIM,EAAc,GAETjE,EAAI,EAAGA,EAAIyC,EAASS,OAAQlD,IAAK,CACxC,IAAIkE,GAASzB,EAASzC,GAAGmE,SAAWL,GAAYM,KAAKC,GAAM,IACvDC,GAAU7B,EAASzC,GAAGuE,UAAYR,GAAaK,KAAKC,GAAM,IAE1D,EACFD,KAAKI,IAAIN,EAAO,GAAKE,KAAKI,IAAIN,EAAO,GACrCE,KAAKK,IAAKhC,EAASzC,GAAGmE,SAAWC,KAAKC,GAAM,KAC1CD,KAAKK,IAAKX,EAAWM,KAAKC,GAAM,KAChCD,KAAKI,IAAIF,EAAQ,GACjBF,KAAKI,IAAIF,EAAQ,GAEjBI,EAZI,QAWA,EAAIN,KAAKO,MAAMP,KAAKQ,KAAK,GAAIR,KAAKQ,KAAK,EAAI,KAE/CR,KAAKS,IAAIH,GAAQ,KACnBT,EAAYa,KAAK,CAAEJ,KAAMA,EAAMd,QAASnB,EAASzC,KAGrDiE,EAAcA,EAAYc,MAAK,SAACC,EAAGC,GACjC,OAAID,EAAEN,KAAOO,EAAEP,KACN,EACEM,EAAEN,KAAOO,EAAEP,MACZ,EAED,KAGXjB,EAAIX,OAAO,KAAKY,KAAKO,K,8EChGvB,WAEA,OACA,OACA,OAEA,OACA,QACA,OACA,QAMA,QAGMiB,EAAMC,IAEZD,EAAIE,IAAIC,KACRH,EAAIE,IAAIE,EAAWC,QACnBL,EAAIE,IAAIE,EAAWE,WAAW,CAAEC,UAAU,KAE1CP,EAAIrE,IAAI,gCAAgC,SAAC6E,EAAcjC,GACrD,UAAmBiC,EAAIC,OAAOC,KAAMnC,MAEtCyB,EAAIrE,IACF,wCACA,SAAC6E,EAAcjC,GACb,UAAciC,EAAIC,OAAO1C,YAAaQ,MAG1CyB,EAAIrE,IAAI,qCAAqC,SAAC6E,EAAcjC,GAC1D,EAAAD,WAAWkC,EAAIC,OAAO1C,YAAaQ,MAGrCyB,EAAIrE,IAAI,+BAA+B,SAAC6E,EAAcjC,GACpD,EAAAI,kBAAkB6B,EAAIG,MAAM/B,SAAU4B,EAAIG,MAAM9B,UAAWN,MAG7DyB,EAAIrE,IAAI,sBAAsB,SAAC6E,EAAcjC,GAC3C,EAAAqC,eAAeJ,EAAIG,MAAOpC,MAE5ByB,EAAIrE,IAAI,4BAA4B,SAAC6E,EAAcjC,GACjD,EAAAsC,WAAWtC,MAGbyB,EAAIrE,IAAI,6BAA6B,SAAC6E,EAAcjC,GAClD,EAAAuC,YAAYvC,MAEdyB,EAAIrE,IAAI,2BAA2B,SAAC6E,EAAcjC,GAChD,EAAAwC,UAAUxC,MAGZyB,EAAIrE,IAAI,eAAe,SAAC6E,EAAcjC,GACpC,EAAAyC,UAAUzC,MAGZyB,EAAIrE,IAAI,KAAK,SAAC6E,EAAcjC,GAC1B,OAAOA,EAAIX,OAAO,KAAKqD,SAAS,EAAAC,KAAKC,UAAW,0BAIlDnB,EAAIE,IAAID,EAAQmB,OAAO,EAAAF,KAAKC,UAAW,aAGvCnB,EAAIqB,IAAI,MAAM,SAACb,EAAcjC,GAC3B,OAAOA,EAAIX,OAAO,KAAKqD,SAAS,EAAAC,KAAKC,UAAW,0BAElDnB,EAAIqB,IAAI,MAAM,SAACb,EAAcjC,GAC3B,OAAOA,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,uBAGzCuB,EAAIE,KAAI,SAACM,EAAcjC,EAAe+C,GACpC,OAAO/C,EACJX,OAAO,KACPY,KAAK,CAAEC,QAAS,2CAGrBuB,EAAIuB,OAAO,MAAM,WACfC,QAAQC,IAAI,yC,cCjFd5G,EAAOD,QAAUkC,QAAQ,Y,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,cCAzBjC,EAAOD,QAAUkC,QAAQ,gB,68CCAzB,WAWA,OAEM4E,EAAS,CACbrE,QAAS,CACPsE,OAAQ,EAAA3E,cACR4E,QAAS,EAAA3E,iBAmFb,UA/EA,SAAkCyD,EAAcnC,G,wJAC9C,IAAKmC,IAASA,EAAKmB,OACjB,MAAO,CAAP,EAAOtD,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,mBAEzCiC,EAAOA,EAAKmB,OAAOC,cAEbpE,EACJ,8DACAgD,EACA,uC,iBAGW,O,sBAAA,GAAM,UAAMhD,EAAKgE,I,OAG5B,IAHIK,EAAO,SACPC,EAAyBD,EAAKlE,KAC9BoE,EAAoC,CAAEC,eAAgB,IACrD,EAAL,EAAmB,EAAAF,EAAQG,SAAW,GAAnB,eACjB,IADOC,EAAM,KACR,EAAL,EAAyB,EAAAA,EAAOF,gBAAkB,GAAzB,eAA6B,CAWpD,IAXOG,EAAY,KACfC,EAAmC,CACrCN,QAAS,GACTO,gBAAiB,GACjBC,eAAgB,IAElBP,EAAcC,eAAetC,KAAK0C,GAE9BD,EAAaE,kBACfD,EAAiBC,gBAAkBF,EAAaE,gBAAgBE,MAE7D,EAAL,EAAkB,EAAAJ,EAAaL,SAAW,GAAxB,eAChB,IADOU,EAAK,KACP,EAAL,EAAkB,EAAAA,EAAMC,QAAU,GAAhB,eAAoB,CACpC,IADOC,EAAK,KACP,EAAL,EAAuB,EAAAA,EAAMC,aAAe,GAArB,eAAdC,EAAU,KACjBR,EAAiBN,QAAQpC,KAAKkD,GAGhC,IAAK,EAAL,EAAqB,EAAAF,EAAMG,WAAa,GAAnB,eACnB,IADOC,EAAQ,KACV,EAAL,EAAuB,EAAAA,EAASH,aAAe,GAAxB,eAAdC,EAAU,KACjBR,EAAiBN,QAAQpC,KAAKkD,GAMtC,IAAK,EAAL,EAA0B,EAAAT,EAAaG,gBAAkB,GAA/B,eAAjBS,EAAa,KACpBX,EAAiBE,eAAe5C,KAAK,CACnCsD,UAAWD,EAAcC,UACzBC,iBAAkBF,EAAcE,mBAKxC,MAAO,CAAP,EAAO5E,EAAIX,OAAO,KAAKY,KAAKyD,I,OAE5B,O,WAAO,CAAP,EAAO1D,EAAIX,OAAO,KAAKY,KAAK,I,wGCvEhC,WAGA,OACA,OAuBA,UArBA,SAAuBT,EAAqBQ,GAE1C,KADAR,EAAcA,EAAY8D,QAExB,OAAOtD,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,yBAGzC,IAAIC,EAAU,EAAAZ,oBAAoBC,GAClC,IAAKW,EACH,OAAOH,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,wBAGzC,IAAIf,EAAS,EAAAR,cAAa,gBAAgBa,EAC1C,UAAMpC,IAAI+B,EAAK,EAAAN,cACZgG,MAAK,SAAAC,GACJ9E,EAAIX,OAAO,KAAKY,KAAK,CAAEE,QAASA,EAAS4E,WAAYD,EAAQxF,UAE9D0F,OAAM,SAAAC,GACLjF,EAAIX,OAAO,KAAKY,KAAKgF,Q,0HCtB3B,KACA,MACA,MAFA,IAIA,QAOA,IACE,EAAAC,OAAOC,IACL,yHAEA,SAAAC,GACMA,GACFnC,QAAQC,IAAIkC,MAKlB,EAAAF,OAAOC,IACL,sFACA,SAAAC,GACMA,GACFnC,QAAQC,IAAIkC,MAIlB,MAAOA,GACPnC,QAAQoC,MAAMD,GAsKhB,0BAA+BhD,EAAYpC,GACzC,IAAIsF,EAAS,EACTlD,GAASA,EAAMkD,QAAUlD,EAAMkD,OAAS,IAC1CA,EAASlD,EAAMkD,QAGjB,IAAMC,EAAM,+DAA+DD,EAAM,IACjF,IACE,EAAAJ,OAAOpC,IAAIyC,GAAK,SAACH,EAAKI,GACpB,GAAIJ,EAGF,OAFA,EAAAK,eACAzF,EAAIX,OAAO,KAAKyC,KAAK,IAGvB9B,EAAIX,OAAO,KAAKyC,KAAK0D,MAEvB,MAAOJ,GACPnC,QAAQoC,MAAM,IAAIK,KAAQN,GAC1B,EAAAK,YAIJ,sBAA2BzF,GAGzB,IACE,EAAAkF,OAAO9H,IAHG,sCAGM,SAACgI,EAAKO,GACpB,GAAIP,EAGF,OAFA,EAAAK,eACAzF,EAAIX,OAAO,KAAKY,KAAK,CAAE2F,IAAK,IAG9B5F,EAAIX,OAAO,KAAKY,KAAK0F,MAEvB,MAAOP,GACPnC,QAAQoC,MAAM,IAAIK,KAAQN,GAC1B,EAAAK,YAIJ,qBAA0BzF,GAGxB,IACE,EAAAkF,OAAO9H,IAHG,qCAGM,SAACgI,EAAKO,GACpB,GAAIP,EAGF,OAFA,EAAAK,eACAzF,EAAIX,OAAO,KAAKY,KAAK,CAAE2F,IAAK,IAG9B5F,EAAIX,OAAO,KAAKY,KAAK0F,MAEvB,MAAOP,GACPnC,QAAQoC,MAAM,IAAIK,KAAQN,GAC1B,EAAAK,YAGJ,uBAA4BzF,GAG1B,IACE,EAAAkF,OAAO9H,IAHG,gEAGM,SAACgI,EAAKO,GACpB,GAAIP,EAGF,OAFA,EAAAK,eACAzF,EAAIX,OAAO,KAAKY,KAAK,CAAE2F,IAAK,IAG9B5F,EAAIX,OAAO,KAAKY,KAAK0F,MAEvB,MAAOP,GACPnC,QAAQoC,MAAM,IAAIK,KAAQN,GAC1B,EAAAK,a,cC7QJnJ,EAAOD,QAAUkC,QAAQ,Y,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,8ECAzB,WACA,QAEIsH,EAAqB,KAEzB,kBACE,IAAKA,EAAU,CACb,IAAMC,EAAU,EAAAC,UACVC,EAAS,EAAArD,KAAKC,UAAW,cAC/BiD,EAAW,IAAIC,EAAQG,SACrBD,EACA,EAAAE,eAAiB,EAAAC,aACjB,SAAAf,GACMA,IACFnC,QAAQC,IAAI,aAAckC,GAC1BS,OAAWtF,MAKnB,OAAOsF,GAGT,qBACMA,IACFA,EAASO,OAAM,SAAAhB,GACTA,GACFnC,QAAQoC,MAAMD,MAGlBS,OAAWtF,K,cC9BfjE,EAAOD,QAAUkC,QAAQ,Y,8ECCzB,YACA,OAEA,qBAA0ByB,GACxB,EAAAqG,QAAQ,aAAa,SAACjB,EAAKkB,GAEzB,GAAIlB,EAEF,OADAnC,QAAQC,IAAIkC,GACLpF,EAAIX,OAAO,KAAKY,KAAK,CAAEC,QAAS,oBAGzC,IAAIqG,EAAO,GACXD,EAAME,SAAQ,SAACC,GACQ,OAAjB,EAAAC,QAAQD,IACVF,EAAKlF,KAAKoF,MAGdxD,QAAQC,IAAIqD,GACZvG,EAAIX,OAAO,KAAKY,KAAKsG,Q,cCnBzBjK,EAAOD,QAAUkC,QAAQ","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"axios\");","module.exports = require(\"path\");","export const ltaAccountKey: string = '6sVzf9zXRaCgkJUdjxIw2A==';\r\n\r\nexport const oxford_app_id: string = '0314e9e2';\r\nexport const oxford_app_key: string = '5a6c2589474a2f83ccd69f397bfec7a2';\r\n","import { ltaAccountKey } from '../../account-keys';\r\n\r\nconst busArrivalUrl =\r\n  'http://datamall2.mytransport.sg/ltaodataservice/BusArrivalv2';\r\nconst busStopsUrl = 'http://datamall2.mytransport.sg/ltaodataservice/BusStops';\r\n\r\nconst headerConfig = {\r\n  headers: {\r\n    AccountKey: ltaAccountKey\r\n  }\r\n};\r\n\r\nexport { busArrivalUrl, busStopsUrl, headerConfig };\r\n","import Axios from 'axios';\r\nimport { Response } from 'express';\r\n\r\nimport { busStopsUrl, headerConfig } from './lta';\r\nimport { BusStop } from './bus-stops-interface';\r\n\r\nlet busStops: BusStop[] = [];\r\n\r\nasync function getBusStopsFromLta(skip?: number): Promise<BusStop[]> {\r\n  try {\r\n    let url = busStopsUrl;\r\n    if (skip) {\r\n      url += `?$skip=${skip}`;\r\n    }\r\n    let response = await Axios.get(url, headerConfig);\r\n    if (response.status != 200) {\r\n      throw { status: response.status };\r\n    }\r\n    return response.data.value;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nasync function getAllBusStops() {\r\n  try {\r\n    let skip = 0;\r\n    let newBusStops: BusStop[] = [];\r\n    do {\r\n      newBusStops = await getBusStopsFromLta(skip);\r\n      let temp = busStops;\r\n      busStops = temp.concat(newBusStops);\r\n      skip += 500;\r\n    } while (newBusStops.length === 500);\r\n  } catch (e) {\r\n    busStops = [];\r\n    getAllBusStops();\r\n  }\r\n}\r\ngetAllBusStops();\r\n\r\nfunction checkBusStopLocally(busStopCode: string) {\r\n  if (!busStopCode) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    if (busStopCode === busStops[i].BusStopCode) {\r\n      return busStops[i];\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getBusStop(busStopCode: string, res: Response) {\r\n  if (!busStopCode) {\r\n    return res.status(400).send({ message: 'Invalid Bus Stop Code.' });\r\n  }\r\n  let busStop = checkBusStopLocally(busStopCode);\r\n  if (busStop) {\r\n    return res.status(200).send(busStop);\r\n  }\r\n  return res.status(400).send({ message: 'Bus Stop info not found.' });\r\n}\r\n\r\nfunction getNearbyBusStops(latitude: number, longitude: number, res: Response) {\r\n  if (latitude === undefined || longitude === undefined) {\r\n    return res.status(400).send({ message: 'Invalid coordinates.' });\r\n  }\r\n\r\n  let nearbyStops = [];\r\n  const R = 6371e3;\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    let dLat = ((busStops[i].Latitude - latitude) * Math.PI) / 180;\r\n    let dLong = ((busStops[i].Longitude - longitude) * Math.PI) / 180;\r\n\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((busStops[i].Latitude * Math.PI) / 180) *\r\n        Math.cos((latitude * Math.PI) / 180) *\r\n        Math.sin(dLong / 2) *\r\n        Math.sin(dLong / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let dist = R * c;\r\n    if (Math.abs(dist) < 280) {\r\n      nearbyStops.push({ dist: dist, busStop: busStops[i] });\r\n    }\r\n  }\r\n  nearbyStops = nearbyStops.sort((a, b) => {\r\n    if (a.dist > b.dist) {\r\n      return 1;\r\n    } else if (a.dist < b.dist) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n  res.status(200).send(nearbyStops);\r\n}\r\n\r\nexport { busStops, checkBusStopLocally, getBusStop, getNearbyBusStops };\r\n","import * as express from \"express\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { join } from \"path\";\r\nimport * as cors from \"cors\";\r\nimport * as bodyParser from \"body-parser\";\r\n\r\nimport CheckOxfordEntries from \"./dictionary/dictionary\";\r\nimport getBusArrival from \"./lta/bus-arrival\";\r\nimport { getBusStop, getNearbyBusStops } from \"./lta/bus-stops\";\r\nimport {\r\n  wordsFrequence,\r\n  wordsTotal,\r\n  urlsScanned,\r\n  urlsTotal,\r\n} from \"./scraper/scrape\";\r\nimport { movieList } from \"./movies/movies\";\r\n\r\n// Express server\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\napp.get(\"/api/dictionary/oxford/:word\", (req: Request, res: Response) => {\r\n  CheckOxfordEntries(req.params.word, res);\r\n});\r\napp.get(\r\n  \"/api/lta/bus/busArrival/:busStopCode\",\r\n  (req: Request, res: Response) => {\r\n    getBusArrival(req.params.busStopCode, res);\r\n  }\r\n);\r\napp.get(\"/api/lta/bus/busStop/:busStopCode\", (req: Request, res: Response) => {\r\n  getBusStop(req.params.busStopCode, res);\r\n});\r\n\r\napp.get(\"/api/lta/bus/nearbyBusStops\", (req: Request, res: Response) => {\r\n  getNearbyBusStops(req.query.latitude, req.query.longitude, res);\r\n});\r\n\r\napp.get(\"/api/scraper/words\", (req: Request, res: Response) => {\r\n  wordsFrequence(req.query, res);\r\n});\r\napp.get(\"/api/scraper/words/total\", (req: Request, res: Response) => {\r\n  wordsTotal(res);\r\n});\r\n\r\napp.get(\"/api/scraper/urls/scanned\", (req: Request, res: Response) => {\r\n  urlsScanned(res);\r\n});\r\napp.get(\"/api/scraper/urls/total\", (req: Request, res: Response) => {\r\n  urlsTotal(res);\r\n});\r\n\r\napp.get(\"/api/movies\", (req: Request, res: Response) => {\r\n  movieList(res);\r\n});\r\n\r\napp.get(\"/\", (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, \"/client/index.html\"));\r\n});\r\n\r\n// Server static files from /client\r\napp.use(express.static(join(__dirname, \"/client\")));\r\n\r\n// error handling - 1\r\napp.all(\"/*\", (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, \"/client/index.html\"));\r\n});\r\napp.all(\"/*\", (req: Request, res: Response) => {\r\n  return res.status(404).send({ message: \"Page not found.\" });\r\n});\r\n// error handling - 2\r\napp.use((req: Request, res: Response, next: NextFunction) => {\r\n  return res\r\n    .status(500)\r\n    .send({ message: \"Issue happened. Please retry later!\" });\r\n});\r\n\r\napp.listen(8080, () => {\r\n  console.log(\"InSG listening HTTP on port 8080.\");\r\n});\r\n","module.exports = require(\"express\");","module.exports = require(\"cors\");","module.exports = require(\"body-parser\");","import Axios from 'axios';\r\nimport { Response } from 'express';\r\n\r\nimport {\r\n  CheckEntriesResult,\r\n  OxfordEntries,\r\n  OxfordLemmas,\r\n  IdText,\r\n  YcLexicalEntry\r\n} from './oxford-interface';\r\n\r\nimport { oxford_app_id, oxford_app_key } from '../../account-keys';\r\n\r\nconst config = {\r\n  headers: {\r\n    app_id: oxford_app_id,\r\n    app_key: oxford_app_key\r\n  }\r\n};\r\n\r\nasync function CheckOxfordEntries(word: string, res: Response) {\r\n  if (!word || !word.trim()) {\r\n    return res.status(400).send({ message: 'Invalid word.' });\r\n  }\r\n  word = word.trim().toLowerCase();\r\n\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/entries/en-gb/' +\r\n    word +\r\n    '?fields=definitions%2Cpronunciations';\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    let entries: OxfordEntries = resp.data;\r\n    let return_result: CheckEntriesResult = { lexicalEntries: [] };\r\n    for (let result of entries.results || []) {\r\n      for (let lexicalEntry of result.lexicalEntries || []) {\r\n        let new_lexicalEntry: YcLexicalEntry = {\r\n          entries: [],\r\n          lexicalCategory: '',\r\n          pronunciations: []\r\n        };\r\n        return_result.lexicalEntries.push(new_lexicalEntry);\r\n\r\n        if (lexicalEntry.lexicalCategory) {\r\n          new_lexicalEntry.lexicalCategory = lexicalEntry.lexicalCategory.text;\r\n        }\r\n        for (let entry of lexicalEntry.entries || []) {\r\n          for (let sense of entry.senses || []) {\r\n            for (let definition of sense.definitions || []) {\r\n              new_lexicalEntry.entries.push(definition);\r\n            }\r\n\r\n            for (let subsense of sense.subsenses || []) {\r\n              for (let definition of subsense.definitions || []) {\r\n                new_lexicalEntry.entries.push(definition);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let pronunciation of lexicalEntry.pronunciations || []) {\r\n          new_lexicalEntry.pronunciations.push({\r\n            audioFile: pronunciation.audioFile,\r\n            phoneticSpelling: pronunciation.phoneticSpelling\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return res.status(200).send(return_result);\r\n  } catch (e) {\r\n    return res.status(400).send(e);\r\n  }\r\n}\r\n\r\nasync function CheckOxfordLemmas(word: string) {\r\n  if (!word || !word.trim()) {\r\n    return 'Invalid word.';\r\n  }\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/lemmas/en-gb/' + word;\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    const lemmas: OxfordLemmas = resp.data;\r\n    let return_result: IdText[] = [];\r\n    lemmas.results.forEach(result => {\r\n      result.lexicalEntries.forEach(lexicalEntry => {\r\n        lexicalEntry.inflectionOf.forEach(inflection => {\r\n          return_result.push(inflection);\r\n        });\r\n      });\r\n    });\r\n    return return_result;\r\n  } catch (e) {\r\n    return e.message;\r\n  }\r\n}\r\n\r\nexport default CheckOxfordEntries;\r\n","import Axios from 'axios';\r\nimport { Response } from 'express';\r\n\r\nimport { busArrivalUrl, headerConfig } from './lta';\r\nimport { checkBusStopLocally } from './bus-stops';\r\n\r\nfunction getBusArrival(busStopCode: string, res: Response) {\r\n  busStopCode = busStopCode.trim();\r\n  if (!busStopCode) {\r\n    return res.status(400).send({ message: 'Invalid BusStopCode.' });\r\n  }\r\n\r\n  let busStop = checkBusStopLocally(busStopCode);\r\n  if (!busStop) {\r\n    return res.status(400).send({ message: 'Bus Stop not found.' });\r\n  }\r\n\r\n  let url = `${busArrivalUrl}?BusStopCode=${busStopCode}`;\r\n  Axios.get(url, headerConfig)\r\n    .then(respose => {\r\n      res.status(200).send({ busStop: busStop, busArrival: respose.data });\r\n    })\r\n    .catch(e => {\r\n      res.status(400).send(e);\r\n    });\r\n}\r\n\r\nexport default getBusArrival;\r\n","import { Response } from \"express\";\r\nimport Axios from \"axios\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { CronJob } from \"cron\";\r\n\r\nimport { dbRW, dbClose } from \"../db-ops\";\r\n\r\ninterface WordFrequence {\r\n  word: string;\r\n  frequence: number;\r\n}\r\n\r\ntry {\r\n  dbRW().run(\r\n    `create table if not exists urls(url TEXT UNIQUE PRIMARY KEY,\r\n      domain TEXT, scanDateStr TEXT, scanDate INTEGER);`,\r\n    err => {\r\n      if (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  );\r\n\r\n  dbRW().run(\r\n    `create table if not exists words(word TEXT UNIQUE PRIMARY KEY, frequence INTEGER);`,\r\n    err => {\r\n      if (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  );\r\n} catch (err) {\r\n  console.error(err);\r\n}\r\n\r\nasync function scrapeUrls(\r\n  url: string,\r\n  cheerioStatic: CheerioStatic\r\n): Promise<string[]> {\r\n  if (!url || !cheerioStatic) {\r\n    return [];\r\n  }\r\n\r\n  if (url[url.length - 1] === \"/\") {\r\n    url = url.substring(0, length - 1);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let urls = [];\r\n    cheerioStatic(\"html *\").each(function() {\r\n      try {\r\n        if (this.type != \"tag\") {\r\n          return;\r\n        }\r\n\r\n        let obj = cheerioStatic(this);\r\n        let href = obj.attr(\"href\");\r\n        href = (href || \" \").trim();\r\n        if (\r\n          !href ||\r\n          href == \"/\" ||\r\n          href === \"//\" ||\r\n          href.includes(\"http:\") ||\r\n          href.includes(\"#\") ||\r\n          href.includes(\".css\") ||\r\n          href.includes(\".pdf\") ||\r\n          href.includes(\"resources\") ||\r\n          href.includes(\"?\")\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        if (href[0] == \"/\" && href[1] == \"/\") {\r\n          href = \"https:\" + href;\r\n        }\r\n        if (href[href.length - 1] === \"/\") {\r\n          href = href.substring(0, href.length - 1);\r\n        }\r\n\r\n        if (!href.includes(\"//\")) {\r\n          href = url + \"/\" + href;\r\n        }\r\n        if (!urls.includes(href)) {\r\n          urls.push(href);\r\n        }\r\n      } catch (err) {\r\n        reject();\r\n      }\r\n    });\r\n    resolve(urls);\r\n  });\r\n}\r\n\r\nasync function scrapeWords(\r\n  url: string,\r\n  cheerioStatic: CheerioStatic\r\n): Promise<WordFrequence[]> {\r\n  if (!url || !cheerioStatic) {\r\n    return [];\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let wordsObj = [];\r\n    cheerioStatic(\"body *\").each(function() {\r\n      if (this.type != \"tag\") return;\r\n\r\n      let obj = cheerioStatic(this);\r\n      if (!obj || obj.html().indexOf(\"<\") != -1) return;\r\n      let text = obj.text();\r\n      if (!text) return;\r\n\r\n      let words = text.split(\" \");\r\n      words.forEach(word => {\r\n        word = word.trim();\r\n        if (!word || word.length <= 2 || !word.match(/^[a-zA-Z]+$/)) return;\r\n\r\n        word = word.toLocaleLowerCase();\r\n        for (let item of wordsObj) {\r\n          if (item.word === word) {\r\n            return item.frequence++;\r\n          }\r\n        }\r\n        wordsObj.push({ word: word, frequence: 1 });\r\n      });\r\n    });\r\n    resolve(wordsObj);\r\n  });\r\n}\r\n\r\nasync function scrape(url: string): Promise<boolean> {\r\n  if (!url) return false;\r\n\r\n  console.log(\"scraping: \", url);\r\n  try {\r\n    url = url.trim();\r\n    if (!url.includes(\"//\")) {\r\n      url = \"https://\" + url;\r\n    }\r\n\r\n    let dateStr = new Date().toLocaleString();\r\n    let date = Date.now();\r\n    let sql = `update urls set scanDateStr=\"${dateStr}\", scanDate=${date}\r\n      where url=\"${url}\" and scanDate is null;`;\r\n    dbRW().run(sql, err => {\r\n      if (err) {\r\n        console.error(new Date(), err);\r\n        console.error(new Date(), sql);\r\n        dbClose();\r\n      }\r\n    });\r\n\r\n    let config = {\r\n      headers: {\r\n        \"Content-Length\": 0,\r\n        \"Content-Type\": \"text/plain\"\r\n      }\r\n    };\r\n    const urlResponse = await Axios(url, config);\r\n    let cheerioLoad = cheerio.load(urlResponse.data);\r\n\r\n    await scrapeUrls(url, cheerioLoad).then(urls => {\r\n      urls.forEach(element => {\r\n        let urlSplits = element.split(\"/\");\r\n        let domain = \"\";\r\n        for (let split of urlSplits) {\r\n          if (split.includes(\".\")) {\r\n            domain = split;\r\n            break;\r\n          }\r\n        }\r\n        let sql = `insert or ignore into urls(url,domain) values(\"${element}\",\"${domain}\");`;\r\n        dbRW().run(sql, err => {\r\n          if (err) {\r\n            console.error(new Date(), sql, err);\r\n            dbClose();\r\n          }\r\n        });\r\n      });\r\n    });\r\n    await scrapeWords(url, cheerioLoad).then(words => {\r\n      words.forEach(element => {\r\n        let sql = `insert into words(word,frequence) values(\"${element.word}\",${element.frequence})\r\n        on conflict(word) do update set frequence=frequence+${element.frequence};`;\r\n        dbRW().run(sql, err => {\r\n          if (err) {\r\n            console.error(new Date(), sql, err);\r\n            dbClose();\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    // console.error(new Date(), \"scrape function error\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function wordsFrequence(query: any, res: Response) {\r\n  let offset = 0;\r\n  if (query && query.offset && query.offset > 0) {\r\n    offset = query.offset;\r\n  }\r\n\r\n  const sql = `select * from words order by frequence desc limit 50 offset ${offset};`;\r\n  try {\r\n    dbRW().all(sql, (err, rows) => {\r\n      if (err) {\r\n        dbClose();\r\n        res.status(200).json([]);\r\n        return;\r\n      }\r\n      res.status(200).json(rows);\r\n    });\r\n  } catch (err) {\r\n    console.error(new Date(), err);\r\n    dbClose();\r\n  }\r\n}\r\n\r\nexport function wordsTotal(res: Response) {\r\n  const sql = `select count(*) as qty from words;`;\r\n\r\n  try {\r\n    dbRW().get(sql, (err, row) => {\r\n      if (err) {\r\n        dbClose();\r\n        res.status(200).send({ qty: 0 });\r\n        return;\r\n      }\r\n      res.status(200).send(row);\r\n    });\r\n  } catch (err) {\r\n    console.error(new Date(), err);\r\n    dbClose();\r\n  }\r\n}\r\n\r\nexport function urlsTotal(res: Response) {\r\n  const sql = `select count(*) as qty from urls;`;\r\n\r\n  try {\r\n    dbRW().get(sql, (err, row) => {\r\n      if (err) {\r\n        dbClose();\r\n        res.status(200).send({ qty: 0 });\r\n        return;\r\n      }\r\n      res.status(200).send(row);\r\n    });\r\n  } catch (err) {\r\n    console.error(new Date(), err);\r\n    dbClose();\r\n  }\r\n}\r\nexport function urlsScanned(res: Response) {\r\n  const sql = `select count(*) as qty from urls where scanDate is not null;`;\r\n\r\n  try {\r\n    dbRW().get(sql, (err, row) => {\r\n      if (err) {\r\n        dbClose();\r\n        res.status(200).send({ qty: 0 });\r\n        return;\r\n      }\r\n      res.status(200).send(row);\r\n    });\r\n  } catch (err) {\r\n    console.error(new Date(), err);\r\n    dbClose();\r\n  }\r\n}\r\n\r\nasync function scrapeSchedule() {\r\n  await scrape(\"www.slashdot.org\");\r\n  await scrape(\"www.bbc.com\");\r\n  await scrape(\"news.sky.com\");\r\n  await scrape(\"https://www.theguardian.com/international\");\r\n\r\n  new CronJob(\r\n    \"0/15 * * * * *\",\r\n    () => {\r\n      let sql = `SELECT url from urls where domain in \r\n          (SELECT domain from urls group by domain ORDER by max(scanDate) limit 1)`;\r\n      try {\r\n        dbRW().get(sql, (err, row) => {\r\n          if (err || !row) {\r\n            console.error(new Date(), err);\r\n            dbClose();\r\n            return;\r\n          }\r\n          scrape(row.url);\r\n        });\r\n      } catch (err) {\r\n        dbClose();\r\n      }\r\n    },\r\n    null,\r\n    false,\r\n    \"Asia/Singapore\"\r\n  );\r\n}\r\n","module.exports = require(\"cheerio\");","module.exports = require(\"cron\");","import { join } from \"path\";\r\nimport { Database, OPEN_CREATE, OPEN_READWRITE, verbose } from \"sqlite3\";\r\n\r\nlet database: Database = null;\r\n\r\nexport function dbRW() {\r\n  if (!database) {\r\n    const sqlite3 = verbose();\r\n    const dbFile = join(__dirname, \"/../db.db3\");\r\n    database = new sqlite3.Database(\r\n      dbFile,\r\n      OPEN_READWRITE | OPEN_CREATE,\r\n      err => {\r\n        if (err) {\r\n          console.log(\"dbRW error\", err);\r\n          database = undefined;\r\n        }\r\n      }\r\n    );\r\n  }\r\n  return database;\r\n}\r\n\r\nexport function dbClose() {\r\n  if (database) {\r\n    database.close(err => {\r\n      if (err) {\r\n        console.error(err);\r\n      }\r\n    });\r\n    database = undefined;\r\n  }\r\n}\r\n","module.exports = require(\"sqlite3\");","import { Response } from \"express\";\r\nimport { readdir } from \"fs\";\r\nimport { extname } from \"path\";\r\n\r\nexport function movieList(res?: any) {\r\n  readdir(\"/srv/nfs/\", (err, files) => {\r\n    // readdir(\"c:\\\\movies\\\\\", (err, files) => {\r\n    if (err) {\r\n      console.log(err);\r\n      return res.status(500).send({ message: \"No movie found.\" });\r\n    }\r\n\r\n    let rslt = [];\r\n    files.forEach((file) => {\r\n      if (extname(file) == \"mp4\") {\r\n        rslt.push(file);\r\n      }\r\n    });\r\n    console.log(rslt);\r\n    res.status(200).send(rslt);\r\n  });\r\n}\r\n","module.exports = require(\"fs\");"],"sourceRoot":""}