{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///./server/db-ops/sqlite-ops.ts","webpack:///external \"axios\"","webpack:///external \"path\"","webpack:///./server/lta/lta.ts","webpack:///./account-keys.ts","webpack:///./server/lta/bus-stops.ts","webpack:///./server/gifts-products/gifts-products-inventory.ops.ts","webpack:///./server/string-ops/random.ts","webpack:///./server/string-ops/crypto.ts","webpack:///./server/server.ts","webpack:///external \"express-session\"","webpack:///external \"https\"","webpack:///external \"fs\"","webpack:///external \"cors\"","webpack:///external \"body-parser\"","webpack:///./server/router/api-router.ts","webpack:///./server/router/lta.ts","webpack:///./server/lta/bus-arrival.ts","webpack:///./server/router/dictionary.ts","webpack:///./server/dictionary/dictionary.ts","webpack:///./server/router/gifts.ts","webpack:///./server/router/gifts-products.ts","webpack:///./server/gifts-products/gifts-products-categories.ops.ts","webpack:///external \"sqlite3\"","webpack:///./server/gifts-products/gifts-products.ops.ts","webpack:///./server/router/gifts-orders.ts","webpack:///./server/gifts-orders/gifts-orders.ops.ts","webpack:///./server/router/gifts-users.ts","webpack:///./server/gifts-users/gifts-users.ops.ts","webpack:///external \"crypto\"","webpack:///./server/router/gifts-staffs.ts","webpack:///./server/gifts-staffs/administrator.ts","webpack:///./server/email/email.ops.ts","webpack:///external \"nodemailer\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","DB","join","__dirname","sqlite3","verbose","db_r","undefined","db_rw","SqliteReset","close","SqliteGet","sql","Promise","resolve","reject","Database","OPEN_READONLY","err","row","e","SqliteAll","all","rows","SqliteRun","OPEN_READWRITE","run","SqlitePrepareRun","params","serialize","stmt","prepare","length","finalize","busArrivalUrl","busStopsUrl","headerConfig","headers","AccountKey","ltaAccountKey","oxford_app_id","oxford_app_key","busStops","getBusStopsFromLta","skip","url","response","status","data","checkBusStopLocally","busStopCode","BusStopCode","getAllBusStops","newBusStops","temp","concat","getBusStopInfo","res","send","message","busStopInfo","getNearbyBusStops","latitude","longitude","nearbyStops","dLat","Latitude","Math","PI","dLong","Longitude","a","sin","cos","dist","atan2","sqrt","abs","push","busStop","sort","b","GetInventory","inventory","AdjustInventory","body","product_id","qty","time","Date","now","ReserveInventory","order_id","products","success","failed","orderQty","RandomTypes","random","type","rString","String","Number","Capital","result","floor","randomNumber","randomCapitals","randomString","algorithm","crypto","scryptSync","iv","Buffer","alloc","encrypt","text","cipher","createCipheriv","crypted","update","final","decrypt","decipher","createDecipheriv","dec","app","express","use","cors","bodyParser","json","urlencoded","extended","session","secret","resave","saveUninitialized","cookie","maxAge","req","sendFile","static","dotfiles","next","listen","console","log","httpsOptions","readFileSync","cert","createServer","apiRouter","Router","busRouter","post","query","trim","then","respose","busArrival","catch","dictionaryRouter","word","config","app_id","app_key","toLowerCase","resp","entries","return_result","lexicalEntries","results","lexicalEntry","new_lexicalEntry","lexicalCategory","pronunciations","entry","senses","sense","definitions","definition","subsenses","subsense","pronunciation","audioFile","phoneticSpelling","giftsRouter","giftsProductsRouter","GetCategories","AddCategory","put","UpdateCategory","delete","DeleteCategory","GetSamplesOfCategories","GetProducts","GetProduct","AddProduct","UpdateProduct","DeleteProduct","globalCategories","globalSamplesOfCategories","globalCategoryJson","testChildParent","child","parent","parent_id","category_id","children","added","fields","values","details","num","cnt","forEach","element","arrangedCategory","arrangeCategories","product","GetProductsByCategory","price","colour","img","packaging","note","material","retailer","changes","size","giftsOrdersRouter","user","sendStatus","GetUserOrders","staff","GetStaffOrders","NewOrder","id","new_status","sno","order_no","email","includes","mobile","company","mobile2","addr","new_sale_price","new_qty","user_id","orders","giftsUsersRouter","Login","UserInfo","Logout","Register","DisableAccount","bLogin","uid","bStaff","pwd","giftsStaffsRouter","newStaff","disableStaff","deleteStaff","firstName","lastName","staff_id","transporter","createTransport","host","secure","auth","pass","mailOptions","from","to","subject","html","sendMail"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"express\");","import { join } from 'path';\r\nimport { Database, OPEN_READONLY, OPEN_READWRITE, verbose } from 'sqlite3';\r\n\r\nconst DB = join(__dirname, '/../info.xyz');\r\n\r\nlet sqlite3 = verbose();\r\nlet db_r: Database = undefined;\r\nlet db_rw: Database = undefined;\r\n\r\nfunction SqliteReset() {\r\n  if (db_r) {\r\n    db_r.close();\r\n    db_r = undefined;\r\n  }\r\n  if (db_rw) {\r\n    db_rw.close();\r\n    db_rw = undefined;\r\n  }\r\n}\r\n\r\nfunction SqliteGet(sql: string): Promise<any> {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      if (!db_r) {\r\n        db_r = new sqlite3.Database(DB, OPEN_READONLY);\r\n      }\r\n      db_r.get(sql, (err, row) => {\r\n        if (err) {\r\n          SqliteReset();\r\n          return reject(err);\r\n        }\r\n        resolve(row);\r\n      });\r\n    } catch (e) {\r\n      SqliteReset();\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction SqliteAll(sql: string): Promise<any[]> {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      if (!db_r) {\r\n        db_r = new sqlite3.Database(DB, OPEN_READONLY);\r\n      }\r\n      db_r.all(sql, (err, rows) => {\r\n        if (err) {\r\n          SqliteReset();\r\n          return reject(err);\r\n        }\r\n        resolve(rows);\r\n      });\r\n    } catch (e) {\r\n      SqliteReset();\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction SqliteRun(sql: string): Promise<boolean> {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      if (!db_rw) {\r\n        db_rw = new sqlite3.Database(DB, OPEN_READWRITE);\r\n      }\r\n      db_rw.run(sql, [], err => {\r\n        if (err) {\r\n          SqliteReset();\r\n          return reject(err);\r\n        }\r\n        resolve(true);\r\n      });\r\n    } catch (e) {\r\n      SqliteReset();\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction SqlitePrepareRun(sql: string, params: []): Promise<boolean> {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      if (!db_rw) {\r\n        db_rw = new sqlite3.Database(DB, OPEN_READWRITE);\r\n      }\r\n      db_rw.serialize(() => {\r\n        const stmt = db_rw.prepare(sql, err => {\r\n          if (err) {\r\n            SqliteReset();\r\n            return reject(err);\r\n          }\r\n        });\r\n        for (let i = 0; i < params.length; i++) {\r\n          stmt.run(params[i]);\r\n        }\r\n        stmt.finalize(err => {\r\n          if (err) {\r\n            SqliteReset();\r\n            return reject(err);\r\n          }\r\n          resolve(true);\r\n        });\r\n      });\r\n    } catch (e) {\r\n      SqliteReset();\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nexport { SqliteAll, SqliteGet, SqlitePrepareRun, SqliteRun };\r\n","module.exports = require(\"axios\");","module.exports = require(\"path\");","import { ltaAccountKey } from '../../account-keys';\r\n\r\nconst busArrivalUrl =\r\n  'http://datamall2.mytransport.sg/ltaodataservice/BusArrivalv2';\r\nconst busStopsUrl = 'http://datamall2.mytransport.sg/ltaodataservice/BusStops';\r\n\r\nconst headerConfig = {\r\n  headers: {\r\n    AccountKey: ltaAccountKey\r\n  }\r\n};\r\n\r\nexport { busArrivalUrl, busStopsUrl, headerConfig };\r\n","export const ltaAccountKey: string = '6sVzf9zXRaCgkJUdjxIw2A==';\r\n\r\nexport const oxford_app_id: string = '0314e9e2';\r\nexport const oxford_app_key: string = '5a6c2589474a2f83ccd69f397bfec7a2';\r\n","import Axios from 'axios';\r\n\r\nimport { Response } from '../interface';\r\nimport { busStopsUrl, headerConfig } from './lta';\r\nimport { BusStopInfo } from './bus-stops-interface';\r\n\r\nlet busStops: BusStopInfo[] = [];\r\n\r\nasync function getBusStopsFromLta(skip?: number): Promise<BusStopInfo[]> {\r\n  try {\r\n    let url = busStopsUrl;\r\n    if (skip) {\r\n      url += `?$skip=${skip}`;\r\n    }\r\n    let response = await Axios.get(url, headerConfig);\r\n    if (response.status != 200) {\r\n      throw { status: response.status };\r\n    }\r\n    return response.data.value;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nasync function getAllBusStops() {\r\n  try {\r\n    let skip = 0;\r\n    let newBusStops: BusStopInfo[] = [];\r\n    do {\r\n      newBusStops = await getBusStopsFromLta(skip);\r\n      let temp = busStops;\r\n      busStops = temp.concat(newBusStops);\r\n      skip += 500;\r\n    } while (newBusStops.length === 500);\r\n  } catch (e) {\r\n    busStops = [];\r\n    getAllBusStops();\r\n  }\r\n}\r\ngetAllBusStops();\r\n\r\nfunction checkBusStopLocally(busStopCode: string) {\r\n  if (!busStopCode) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    if (busStopCode === busStops[i].BusStopCode) {\r\n      return busStops[i];\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getBusStopInfo(busStopCode: string, res: Response) {\r\n  if (!busStopCode) {\r\n    return res.status(400).send({ message: 'Invalid Bus Stop Code.' });\r\n  }\r\n  let busStopInfo = checkBusStopLocally(busStopCode);\r\n  if (busStopInfo) {\r\n    return res.status(200).send(busStopInfo);\r\n  }\r\n  return res.status(400).send({ message: 'Bus Stop info not found.' });\r\n}\r\n\r\nfunction getNearbyBusStops(latitude: number, longitude: number, res: Response) {\r\n  if (latitude === undefined || longitude === undefined) {\r\n    return res.status(400).send({ message: 'Invalid coordinates.' });\r\n  }\r\n\r\n  let nearbyStops = [];\r\n  const R = 6371e3;\r\n  for (let i = 0; i < busStops.length; i++) {\r\n    let dLat = ((busStops[i].Latitude - latitude) * Math.PI) / 180;\r\n    let dLong = ((busStops[i].Longitude - longitude) * Math.PI) / 180;\r\n\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((busStops[i].Latitude * Math.PI) / 180) *\r\n        Math.cos((latitude * Math.PI) / 180) *\r\n        Math.sin(dLong / 2) *\r\n        Math.sin(dLong / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let dist = R * c;\r\n    if (Math.abs(dist) < 280) {\r\n      nearbyStops.push({ dist: dist, busStop: busStops[i] });\r\n    }\r\n  }\r\n  nearbyStops = nearbyStops.sort((a, b) => {\r\n    if (a.dist > b.dist) {\r\n      return 1;\r\n    } else if (a.dist < b.dist) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n  res.status(200).send(nearbyStops);\r\n}\r\n\r\nexport { busStops, checkBusStopLocally, getBusStopInfo, getNearbyBusStops };\r\n","import { Response } from '../interface';\r\nimport { SqliteAll, SqliteRun } from '../db-ops/sqlite-ops';\r\n\r\nasync function GetInventory(res: Response) {\r\n  try {\r\n    let sql = `select coalesce(i.qty, 0) as inventory, p.* from giftsProducts as p \r\n                left JOIN giftsInventory as i\r\n                on p.product_id=i.product_id;`;\r\n    const inventory = await SqliteAll(sql);\r\n    return res.status(200).send(inventory);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\n// qty by product now; Todo: qty by each colour, size etc.\r\nasync function AdjustInventory(body: any, res: Response) {\r\n  if (!body.product_id || !body.qty) {\r\n    return res.status(400).send({ message: 'Invalid input.' });\r\n  }\r\n  try {\r\n    let time = Date.now();\r\n    let sql = `insert into giftsInventory (product_id,qty,modifiedOn) \r\n                values(${body.product_id},${body.qty},${time})\r\n                on CONFLICT(product_id) do update set qty=${body.qty}, modifiedOn=${time};`;\r\n    const rslt = await SqliteRun(sql);\r\n    if (rslt) {\r\n      return res.status(200).send({ message: 'OK' });\r\n    }\r\n    return res.status(500).send({ message: 'Failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function ReserveInventory(order_id: string, products: any) {\r\n  if (!order_id || !products || products.length <= 0) {\r\n    throw 'The order is empty.';\r\n  }\r\n\r\n  try {\r\n    const success = [];\r\n    const failed = [];\r\n    let sql = '';\r\n\r\n    let dbReserve = false;\r\n    let dbInventory = false;\r\n    for (let i = 0; i < products.length; i++) {\r\n      let orderQty = products[i].qty;\r\n      sql = `insert into giftsReservation (product_id,order_id,qty,createdOn) \r\n            values (${\r\n              products[i].product_id\r\n            },\"${order_id}\",${orderQty},${Date.now()});`;\r\n      dbReserve = await SqliteRun(sql);\r\n      if (!dbReserve) {\r\n        break;\r\n      }\r\n      sql = `update giftsInventory set qty=qty-${orderQty} where product_id=${products[i].product_id};`;\r\n      dbInventory = await SqliteRun(sql);\r\n      if (!dbInventory) {\r\n        failed.push(products[i]);\r\n        break;\r\n      } else {\r\n        success.push(products[i]);\r\n      }\r\n    }\r\n\r\n    if (failed.length) {\r\n      for (let i = 0; i < success.length; i++) {\r\n        sql = `update giftsInventory set qty=qty+${success[i].qty} where product_id=${success[i].product_id};`;\r\n        dbInventory = await SqliteRun(sql);\r\n        if (dbInventory) {\r\n          sql = `delete from giftsReservation where order_id=\"${order_id}\" and product_id=${success[i].product_id};`;\r\n          dbReserve = await SqliteRun(sql);\r\n          if (!dbReserve) {\r\n            dbReserve = await SqliteRun(sql);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (success.length != products.length) {\r\n      throw 'Reserve from Inventory failed.';\r\n    }\r\n    return true;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\n// async function DeleteInventoryReservation(product_id: number) {\r\n//   try {\r\n//     let sql = `;`;\r\n//     const dbInventory = await DbCollection('gifts-inventory');\r\n//     let updateRslt = await dbInventory.updateOne(\r\n//       {\r\n//         'reservations._id': new ObjectID(_id)\r\n//       },\r\n//       {\r\n//         $pull: { reservations: { _id: new ObjectID(_id) } }\r\n//       }\r\n//     );\r\n//     if (updateRslt.result.nModified <= 0) {\r\n//       throw 'delete reservation failed.';\r\n//     }\r\n//     return updateRslt;\r\n//   } catch (e) {\r\n//     console.log(e);\r\n//     throw 'delete reservation failed with exception.';\r\n//   }\r\n// }\r\n\r\nexport {\r\n  AdjustInventory,\r\n  // DeleteInventoryReservation,\r\n  GetInventory,\r\n  ReserveInventory\r\n};\r\n","/*\r\n * string operation\r\n */\r\nenum RandomTypes {\r\n  Capital,\r\n  Number,\r\n  String\r\n}\r\n\r\n// return string of random numbers with specified length.\r\nfunction randomNumber(length: number): string {\r\n  return random(RandomTypes.Number, length);\r\n}\r\n\r\n// return string of random capital characters with specified length.\r\nfunction randomCapitals(length: number): string {\r\n  return random(RandomTypes.Capital, length);\r\n}\r\n\r\n// return string of random characters or numbers with specified length.\r\nfunction randomString(length: number): string {\r\n  return random(RandomTypes.String, length);\r\n}\r\n\r\nfunction random(type: RandomTypes, length: number): string {\r\n  let rString: string = '';\r\n  switch (type) {\r\n    case RandomTypes.String: {\r\n      rString =\r\n        'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      break;\r\n    }\r\n    case RandomTypes.Number: {\r\n      rString = '0123456789';\r\n      break;\r\n    }\r\n    case RandomTypes.Capital: {\r\n      rString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      break;\r\n    }\r\n    default: {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  let result: string = '';\r\n  for (let i = length; i > 0; --i) {\r\n    result += rString[Math.floor(Math.random() * rString.length)];\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { randomCapitals, randomNumber, randomString };\r\n","import * as crypto from 'crypto';\r\n\r\nconst algorithm = 'aes-192-cbc';\r\nconst password = 'inSGyc83';\r\nconst key = crypto.scryptSync(password, 'salt', 24);\r\nconst iv = Buffer.alloc(16, 0);\r\n\r\nfunction encrypt(text: string): string {\r\n  try {\r\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\r\n    let crypted: string = cipher.update(text, 'utf8', 'hex');\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n  } catch (e) {\r\n    // console.log('encrypt => ', e);\r\n  }\r\n}\r\n\r\nfunction decrypt(text: string): string {\r\n  try {\r\n    let decipher = crypto.createDecipheriv(algorithm, key, iv);\r\n    let dec: string = decipher.update(text, 'hex', 'utf8');\r\n    dec += decipher.final('utf8');\r\n    return dec;\r\n  } catch (e) {\r\n    // console.log('decrypt => ', e);\r\n  }\r\n}\r\n\r\nexport { encrypt, decrypt };\r\n","import * as express from 'express';\r\nimport * as session from 'express-session';\r\nimport { createServer } from 'https';\r\nimport { join } from 'path';\r\nimport { readFileSync } from 'fs';\r\nimport * as cors from 'cors';\r\nimport * as bodyParser from 'body-parser';\r\n\r\nimport { Request, Response, NextFunction } from './interface';\r\nimport apiRouter from './router/api-router';\r\nimport { randomString } from './string-ops/random';\r\n\r\n// Express server\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\napp.use(\r\n  session({\r\n    secret: randomString(20),\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: {\r\n      maxAge: 1000 * 60 * 60 * 24 // millseconds of 24hrs  }\r\n    }\r\n  })\r\n);\r\n\r\napp.use('/api', apiRouter);\r\n\r\napp.get('/', (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, '/client/index.html'));\r\n});\r\n\r\n// Server static files from /client\r\napp.use(express.static(join(__dirname, '/client')));\r\napp.use(\r\n  express.static(join(__dirname, '/client/assets'), { dotfiles: 'allow' })\r\n);\r\n\r\n// error handling - 1\r\napp.all('/*', (req: Request, res: Response) => {\r\n  return res.status(200).sendFile(join(__dirname, '/client/index.html'));\r\n});\r\napp.all('/*', (req: Request, res: Response) => {\r\n  return res.status(404).send({ result: 'Page not found.' });\r\n});\r\n// error handling - 2\r\napp.use((req: Request, res: Response, next: NextFunction) => {\r\n  return res.status(500).send('Issue happened. Please retry later!');\r\n});\r\n\r\napp.listen(8080, () => {\r\n  console.log('Listening HTTP on port 8080.');\r\n});\r\n\r\nconst httpsOptions = {\r\n  key: readFileSync(join(__dirname, '/../localhost.key')),\r\n  cert: readFileSync(join(__dirname, '/../localhost.crt'))\r\n};\r\ncreateServer(httpsOptions, app).listen(8443, () => {\r\n  console.log('Listening HTTPS on port 8443.');\r\n});\r\n","module.exports = require(\"express-session\");","module.exports = require(\"https\");","module.exports = require(\"fs\");","module.exports = require(\"cors\");","module.exports = require(\"body-parser\");","import { Router } from 'express';\r\nimport { Request, Response } from '../interface';\r\n\r\nimport { busRouter } from './lta';\r\nimport dictionaryRouter from './dictionary';\r\nimport giftsRouter from './gifts';\r\n// import httpRouter from './http-request';\r\nimport SendEmail from '../email/email.ops';\r\n\r\nconst apiRouter = Router();\r\n\r\n// url: /api/*\r\napiRouter.use('/lta/bus', busRouter);\r\napiRouter.use('/dictionary', dictionaryRouter);\r\napiRouter.use('/gifts', giftsRouter);\r\n// apiRouter.use('/http', httpRouter);\r\n\r\n// msg from users; forward it via nodemailer.\r\napiRouter.post('/msg', (req: Request, res: Response) => {\r\n  SendEmail(req.body, res);\r\n});\r\n\r\n// error handling\r\napiRouter.all('/*', (req: Request, res: Response) => {\r\n  return res.status(400).send('Invalid Request');\r\n});\r\n\r\nexport default apiRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport getBusArrival from '../lta/bus-arrival';\r\nimport { getBusStopInfo, getNearbyBusStops } from '../lta/bus-stops';\r\n\r\n// url: /api/lta/bus\r\nconst busRouter = Router();\r\n\r\nbusRouter.get('/busArrival/:busStopCode', (req: Request, res: Response) => {\r\n  getBusArrival(req.params.busStopCode, res);\r\n});\r\n\r\nbusRouter.get('/busStop/:busStopCode', (req: Request, res: Response) => {\r\n  getBusStopInfo(req.params.busStopCode, res);\r\n});\r\n\r\nbusRouter.get('/nearbyBusStops', (req: Request, res: Response) => {\r\n  getNearbyBusStops(req.query.latitude, req.query.longitude, res);\r\n});\r\n\r\nexport { busRouter };\r\n","import Axios from 'axios';\r\n\r\nimport { Response } from '../interface';\r\nimport { busArrivalUrl, headerConfig } from './lta';\r\nimport { checkBusStopLocally } from './bus-stops';\r\n\r\nfunction getBusArrival(busStopCode: string, res: Response) {\r\n  busStopCode = busStopCode.trim();\r\n  if (!busStopCode) {\r\n    return res.status(400).send({ message: 'Invalid BusStopCode.' });\r\n  }\r\n\r\n  let busStopInfo = checkBusStopLocally(busStopCode);\r\n  if (!busStopInfo) {\r\n    return res.status(400).send({ message: 'Bus Stop not found.' });\r\n  }\r\n\r\n  let url = `${busArrivalUrl}?BusStopCode=${busStopCode}`;\r\n  Axios.get(url, headerConfig)\r\n    .then(respose => {\r\n      res\r\n        .status(200)\r\n        .send({ busStopInfo: busStopInfo, busArrival: respose.data });\r\n    })\r\n    .catch(e => {\r\n      res.status(400).send(e);\r\n    });\r\n}\r\n\r\nexport default getBusArrival;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport CheckOxfordEntries from '../dictionary/dictionary';\r\n\r\nconst dictionaryRouter = Router();\r\n\r\ndictionaryRouter.get('/oxford/:word', (req: Request, res: Response) => {\r\n  CheckOxfordEntries(req.params.word, res);\r\n});\r\n\r\nexport default dictionaryRouter;\r\n","import Axios from 'axios';\r\nimport { Response } from '../interface';\r\nimport {\r\n  CheckEntriesResult,\r\n  OxfordEntries,\r\n  OxfordLemmas,\r\n  IdText,\r\n  YcLexicalEntry\r\n} from './oxford-interface';\r\n\r\nimport { oxford_app_id, oxford_app_key } from '../../account-keys';\r\n\r\nconst config = {\r\n  headers: {\r\n    app_id: oxford_app_id,\r\n    app_key: oxford_app_key\r\n  }\r\n};\r\n\r\nasync function CheckOxfordEntries(word: string, res: Response) {\r\n  if (!word || !word.trim()) {\r\n    return res.status(400).send({ message: 'Invalid word.' });\r\n  }\r\n  word = word.trim().toLowerCase();\r\n\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/entries/en-gb/' +\r\n    word +\r\n    '?fields=definitions%2Cpronunciations';\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    let entries: OxfordEntries = resp.data;\r\n    let return_result: CheckEntriesResult = { lexicalEntries: [] };\r\n    for (let result of entries.results || []) {\r\n      for (let lexicalEntry of result.lexicalEntries || []) {\r\n        let new_lexicalEntry: YcLexicalEntry = {\r\n          entries: [],\r\n          lexicalCategory: '',\r\n          pronunciations: []\r\n        };\r\n        return_result.lexicalEntries.push(new_lexicalEntry);\r\n\r\n        if (lexicalEntry.lexicalCategory) {\r\n          new_lexicalEntry.lexicalCategory = lexicalEntry.lexicalCategory.text;\r\n        }\r\n        for (let entry of lexicalEntry.entries || []) {\r\n          for (let sense of entry.senses || []) {\r\n            for (let definition of sense.definitions || []) {\r\n              new_lexicalEntry.entries.push(definition);\r\n            }\r\n\r\n            for (let subsense of sense.subsenses || []) {\r\n              for (let definition of subsense.definitions || []) {\r\n                new_lexicalEntry.entries.push(definition);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let pronunciation of lexicalEntry.pronunciations || []) {\r\n          new_lexicalEntry.pronunciations.push({\r\n            audioFile: pronunciation.audioFile,\r\n            phoneticSpelling: pronunciation.phoneticSpelling\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return res.status(200).send(return_result);\r\n  } catch (e) {\r\n    return res.status(400).send(e);\r\n  }\r\n}\r\n\r\nasync function CheckOxfordLemmas(word: string) {\r\n  if (!word || !word.trim()) {\r\n    return 'Invalid word.';\r\n  }\r\n  const url =\r\n    'https://od-api.oxforddictionaries.com/api/v2/lemmas/en-gb/' + word;\r\n\r\n  try {\r\n    let resp = await Axios(url, config);\r\n    const lemmas: OxfordLemmas = resp.data;\r\n    let return_result: IdText[] = [];\r\n    lemmas.results.forEach(result => {\r\n      result.lexicalEntries.forEach(lexicalEntry => {\r\n        lexicalEntry.inflectionOf.forEach(inflection => {\r\n          return_result.push(inflection);\r\n        });\r\n      });\r\n    });\r\n    return return_result;\r\n  } catch (e) {\r\n    return e.message;\r\n  }\r\n}\r\n\r\nexport default CheckOxfordEntries;\r\n","import { Router } from 'express';\r\n\r\nimport giftsProductsRouter from './gifts-products';\r\nimport giftsOrdersRouter from './gifts-orders';\r\nimport giftsUsersRouter from './gifts-users';\r\nimport giftsStaffsRouter from './gifts-staffs';\r\n\r\nconst giftsRouter = Router();\r\n\r\n// url: /api/gifts\r\ngiftsRouter.use('/products', giftsProductsRouter);\r\ngiftsRouter.use('/orders', giftsOrdersRouter);\r\ngiftsRouter.use('/users', giftsUsersRouter);\r\ngiftsRouter.use('/staffs', giftsStaffsRouter);\r\n\r\nexport default giftsRouter;\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  AddCategory,\r\n  DeleteCategory,\r\n  GetCategories,\r\n  GetSamplesOfCategories,\r\n  UpdateCategory\r\n} from '../gifts-products/gifts-products-categories.ops';\r\nimport {\r\n  AddProduct,\r\n  DeleteProduct,\r\n  GetProduct,\r\n  GetProducts,\r\n  GetProductsByCategory,\r\n  UpdateProduct\r\n} from '../gifts-products/gifts-products.ops';\r\nimport {\r\n  AdjustInventory,\r\n  GetInventory\r\n} from '../gifts-products/gifts-products-inventory.ops';\r\n// import { bStaff } from '../gifts-staffs/gifts-staffs.ops';\r\n\r\nconst giftsProductsRouter = Router();\r\n\r\n/*\r\n * inquiry: /api/gifts/products\r\n */\r\ngiftsProductsRouter.get('/categories', (req: Request, res: Response) => {\r\n  GetCategories(res);\r\n});\r\ngiftsProductsRouter.post('/category', (req: Request, res: Response) => {\r\n  // liych\r\n  // if (!bStaff(req.session)) {\r\n  //   return res.status(403).send({ result: 'forbiddent' });\r\n  // }\r\n  AddCategory(req.body, res);\r\n});\r\ngiftsProductsRouter.put('/category', (req: Request, res: Response) => {\r\n  UpdateCategory(req.body, res);\r\n});\r\ngiftsProductsRouter.delete('/category', (req: Request, res: Response) => {\r\n  DeleteCategory(req.query, res);\r\n});\r\n\r\ngiftsProductsRouter.get('/samples', (req: Request, res: Response) => {\r\n  GetSamplesOfCategories(res);\r\n});\r\ngiftsProductsRouter.get('', (req: Request, res: Response) => {\r\n  GetProducts(req.query, res);\r\n});\r\ngiftsProductsRouter.get('/product', (req: Request, res: Response) => {\r\n  GetProduct(req.query, res);\r\n});\r\ngiftsProductsRouter.post('/product', (req: Request, res: Response) => {\r\n  AddProduct(req.body, res);\r\n});\r\ngiftsProductsRouter.put('/product', (req: Request, res: Response) => {\r\n  UpdateProduct(req.body, res);\r\n});\r\ngiftsProductsRouter.delete('/product', (req: Request, res: Response) => {\r\n  DeleteProduct(req.query, res);\r\n});\r\n\r\ngiftsProductsRouter.get('/inventory', (req, res) => {\r\n  GetInventory(res);\r\n});\r\ngiftsProductsRouter.put('/inventory', (req, res) => {\r\n  AdjustInventory(req.body, res);\r\n});\r\n\r\nexport default giftsProductsRouter;\r\n","import { Response } from '../interface';\r\nimport { SqliteAll, SqliteRun } from '../db-ops/sqlite-ops';\r\n\r\nlet globalCategories: any = [];\r\nlet globalSamplesOfCategories: any = [];\r\nlet globalCategoryJson: any[] = [];\r\n\r\nasync function GetCategories(res: Response) {\r\n  if (globalCategories.length) {\r\n    return res.status(200).send(globalCategories);\r\n  }\r\n  try {\r\n    const sql = `select * from giftsProductsCategories;`;\r\n    globalCategories = await SqliteAll(sql);\r\n    return res.status(200).send(globalCategories);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetSamplesOfCategories(res: Response) {\r\n  if (globalSamplesOfCategories.length > 0) {\r\n    return res.status(200).send(globalSamplesOfCategories);\r\n  }\r\n  try {\r\n    let sql = `SELECT * from giftsProducts as g\r\n              where (\r\n                select count(*) from giftsProducts as g1\r\n                where g1.category_id = g.category_id and g1.createdOn >= g.createdOn\r\n              ) <= 3;`;\r\n    globalSamplesOfCategories = await SqliteAll(sql);\r\n    return res.status(200).send(globalSamplesOfCategories);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function AddCategory(body: any, res: Response) {\r\n  if (!body.name) {\r\n    return res.status(400).send({ message: 'Invalid name.' });\r\n  }\r\n\r\n  try {\r\n    let fields = 'name';\r\n    let values = '\"' + body.name + '\"';\r\n    if (body.details) {\r\n      fields += ',details';\r\n      values += ',\"' + body.details + '\"';\r\n    }\r\n    fields += ',createdOn';\r\n    values += ',' + Date.now();\r\n    const sql = `insert into giftsProductsCategories (${fields}) values (${values})`;\r\n    let result = await SqliteRun(sql);\r\n    if (result) {\r\n      globalCategories = [];\r\n      globalSamplesOfCategories = [];\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(200).send({ message: 'failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteCategory(query: any, res: Response) {\r\n  if (!query.category_id) {\r\n    return res.status(400).send({ message: 'Invalid input.' });\r\n  }\r\n\r\n  try {\r\n    let sql = `select count(*) from giftsProducts where category_id='${query.category_id}';`;\r\n    let num = await SqliteAll(sql);\r\n    if (num && num[0] > 0) {\r\n      return res.status(403).send({ message: 'The category is not empty.' });\r\n    }\r\n    sql = `delete from giftsProductsCategories where category_id='${query.category_id}';`;\r\n    let result = await SqliteRun(sql);\r\n    if (result) {\r\n      globalCategories = [];\r\n      globalSamplesOfCategories = [];\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(500).send({ message: 'failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function UpdateCategory(body: any, res: Response) {\r\n  if (!body.category_id) {\r\n    return res.status(400).send({ message: 'Invalid category_id.' });\r\n  }\r\n  if (!body.name) {\r\n    return res.status(400).send({ message: 'Invalid category name.' });\r\n  }\r\n\r\n  let update = `set name='${body.name}'`;\r\n  if (body.details) {\r\n    update += `,details='${body.details}'`;\r\n  }\r\n  if (body.parent_id) {\r\n    update += `,parent_id=${body.parent_id}`;\r\n  } else {\r\n    update += `,parent_id=0`;\r\n  }\r\n\r\n  try {\r\n    let sql = `select count(*) cnt from giftsProductsCategories where name='${body.name}'`;\r\n    let num = await SqliteAll(sql);\r\n    if (num && num[0].cnt > 0) {\r\n      return res\r\n        .status(400)\r\n        .send({ message: 'The category name already exists.' });\r\n    }\r\n\r\n    sql = `update giftsProductsCategories ${update} where category_id=${body.category_id}`;\r\n    let result = await SqliteRun(sql);\r\n    if (result) {\r\n      globalCategories = [];\r\n      globalSamplesOfCategories = [];\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(500).send({ message: 'failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nexport {\r\n  AddCategory,\r\n  DeleteCategory,\r\n  GetCategories,\r\n  GetSamplesOfCategories,\r\n  UpdateCategory\r\n};\r\n\r\ninterface CategoryJson {\r\n  category_id: number;\r\n  children: CategoryJson[];\r\n}\r\n\r\nasync function arrangeCategories() {\r\n  try {\r\n    const sql = `select * from giftsProductsCategories;`;\r\n    globalCategories = await SqliteAll(sql);\r\n\r\n    globalCategoryJson = [];\r\n    for (let i = 0; i < globalCategories.length; i++) {\r\n      if (!globalCategories[i].parent_id) {\r\n        globalCategoryJson.push({\r\n          category_id: globalCategories[i].category_id,\r\n          children: []\r\n        });\r\n        globalCategories[i].added = true;\r\n      }\r\n    }\r\n\r\n    let processed = false;\r\n    do {\r\n      processed = false;\r\n      globalCategories.forEach((element: any) => {\r\n        if (element.added) {\r\n          return;\r\n        }\r\n        globalCategoryJson.forEach(arrangedCategory => {\r\n          processed = processed || testChildParent(element, arrangedCategory);\r\n        });\r\n      });\r\n      // console.log(processed);\r\n    } while (processed);\r\n\r\n    // console.log('arranged categories: ', globalCategoryJson);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction testChildParent(child: any, parent: CategoryJson): boolean {\r\n  if (child.parent_id === parent.category_id) {\r\n    parent.children.push({\r\n      category_id: child.category_id,\r\n      children: []\r\n    });\r\n    child.added = true;\r\n    return true;\r\n  }\r\n\r\n  let rslt = false;\r\n  for (let i = 0; i < parent.children.length; i++) {\r\n    rslt = testChildParent(child, parent.children[i]);\r\n    if (rslt) {\r\n      parent.children[i].children.push({\r\n        category_id: child.category_id,\r\n        children: []\r\n      });\r\n      child.added = true;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\narrangeCategories();\r\n","module.exports = require(\"sqlite3\");","import { SqliteAll, SqliteGet, SqliteRun } from '../db-ops/sqlite-ops';\r\nimport { Response } from '../interface';\r\n\r\nasync function GetProduct(params: any, res: Response) {\r\n  if (!params.product_id) {\r\n    return res.status(400).send({ message: 'Invalid product ID.' });\r\n  }\r\n\r\n  try {\r\n    const sql = `select * from giftsProducts where product_id=${params.product_id};`;\r\n    const product = await SqliteGet(sql);\r\n    return res.status(200).send(product);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetProducts(params: any, res: Response) {\r\n  try {\r\n    const sql = `select * from giftsProducts where (inactive is null or inactive<>1) limit 50;`;\r\n    const products = await SqliteAll(sql);\r\n    return res.status(200).send(products);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetProductsByCategory(query: any, res: Response) {\r\n  if (!query.category_id) {\r\n    return res.status(400).send({ message: 'Invalid category.' });\r\n  }\r\n  try {\r\n    let sql = `select * from giftsProducts where category_id='${query.category_id}' limit 50`;\r\n    let products = await SqliteAll(sql);\r\n    return res.status(200).send(products);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function AddProduct(body: any, res: Response) {\r\n  if (!body.name) {\r\n    return res.status(400).send({ message: 'Invalid name.' });\r\n  }\r\n\r\n  try {\r\n    let fields = 'name';\r\n    let values = '\"' + body.name + '\"';\r\n    // console.log(typeof body.price);\r\n    if ((body.price || 0) <= 0) {\r\n      body.price = 0;\r\n    }\r\n    fields += ',price';\r\n    values += ',' + body.price;\r\n    if ((body.qty || 0) <= 0) {\r\n      body.qty = 0;\r\n    }\r\n    fields += ',qty';\r\n    values += ',' + body.qty;\r\n    if (!body.colour) {\r\n      body.colour = '';\r\n    }\r\n    fields += ',colour';\r\n    values += ',\"' + body.colour + '\"';\r\n    if (body.category_id) {\r\n      fields += ',category_id';\r\n      values += ',' + body.category_id;\r\n    }\r\n    if (!body.img) {\r\n      body.img = '';\r\n    }\r\n    fields += ',img';\r\n    values += ',\"' + body.img + '\"';\r\n    if (!body.packaging) {\r\n      body.packaging = '';\r\n    }\r\n    fields += ',packaging';\r\n    values += ',\"' + body.packaging + '\"';\r\n    if (!body.note) {\r\n      body.note = '';\r\n    }\r\n    fields += ',note';\r\n    values += ',\"' + body.note + '\"';\r\n    if (!body.material) {\r\n      body.material = '';\r\n    }\r\n    fields += ',material';\r\n    values += ',\"' + body.material + '\"';\r\n    if (!body.retailer) {\r\n      body.retailer = '';\r\n    }\r\n    fields += ',retailer';\r\n    values += ',\"' + body.retailer + '\"';\r\n    fields += ',createdOn';\r\n    values += ',' + Date.now();\r\n\r\n    const sql = `insert into giftsProducts (${fields}) values (${values});`;\r\n    let result = await SqliteRun(sql);\r\n    if (result) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(500).send({ message: 'failed' });\r\n  } catch (e) {\r\n    // console.log(e);\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function UpdateProduct(body: any, res: Response) {\r\n  if (!body.product_id) {\r\n    return res.status(400).send({ message: 'Invalid product_id.' });\r\n  }\r\n\r\n  try {\r\n    let changes: string = `name='${body.name}'`;\r\n    if (body.img) {\r\n      changes += `,img='${body.img}'`;\r\n    }\r\n    if (body.price) {\r\n      changes += `,price=${body.price}`;\r\n    }\r\n    if (body.category_id) {\r\n      changes += `,category_id=${body.category_id}`;\r\n    }\r\n    if (body.colour) {\r\n      changes += `,colour='${body.colour}'`;\r\n    }\r\n    if (body.packaging) {\r\n      changes += `,packaging='${body.packaging}'`;\r\n    }\r\n    if (body.material) {\r\n      changes += `,material='${body.material}'`;\r\n    }\r\n    if (body.size) {\r\n      changes += `,size='${body.size}'`;\r\n    }\r\n    if (body.note) {\r\n      changes += `,note='${body.note}'`;\r\n    }\r\n    if (body.retailer) {\r\n      changes += `,retailer='${body.retailer}'`;\r\n    }\r\n    changes += `,modifiedOn=${Date.now()}`;\r\n    const sql = `update giftsProducts set ${changes} where product_id=${body.product_id}`;\r\n    let result = await SqliteRun(sql);\r\n    if (result) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(500).send({ message: 'failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function DeleteProduct(query: any, res: Response) {\r\n  if (!query.product_id) {\r\n    return res.status(400).send({ message: 'Invalid product id.' });\r\n  }\r\n\r\n  try {\r\n    const sql = `update giftsProducts set inactive=1 where product_id=${query.product_id};`;\r\n    const result = await SqliteRun(sql);\r\n    if (result) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    return res.status(500).send({ message: 'failed' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nexport {\r\n  AddProduct,\r\n  DeleteProduct,\r\n  GetProductsByCategory,\r\n  GetProduct,\r\n  GetProducts,\r\n  UpdateProduct\r\n};\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  GetUserOrders,\r\n  GetStaffOrders,\r\n  NewOrder\r\n} from '../gifts-orders/gifts-orders.ops';\r\n\r\nconst giftsOrdersRouter = Router();\r\n\r\ngiftsOrdersRouter.get('/userOrders', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.user) {\r\n    return res.sendStatus(401);\r\n  }\r\n  GetUserOrders(req.session, res);\r\n});\r\n\r\n// all order for staffs' processing.\r\ngiftsOrdersRouter.get('/staffOrders', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff) {\r\n    return res.sendStatus(401);\r\n  }\r\n  GetStaffOrders(req.session, res);\r\n});\r\n\r\n// new order from customer.\r\ngiftsOrdersRouter.post('/order', (req: Request, res: Response) => {\r\n  NewOrder(req, res);\r\n});\r\n\r\n// update order status by staff follow-up.\r\ngiftsOrdersRouter.put('/updateStatus', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n  if (!req.body.new_status || !req.body.sno || !req.body.order_no) {\r\n    return res.status(400).send('Failed. Pleaes review inputs.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.order_no,\r\n    2: req.body.sno,\r\n    3: Date.now(),\r\n    4: req.session.staff.id,\r\n    5: req.body.new_status,\r\n    6: req.body.note || null\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\n// staff to update contact info of the order.\r\ngiftsOrdersRouter.put('/updateContact', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n  if (!req.body.order_no) {\r\n    return res.status(400).send('Order_no empty.');\r\n  } else if (\r\n    !req.body.email ||\r\n    !req.body.email.includes('@') ||\r\n    !req.body.email.includes('.') ||\r\n    req.body.email.includes('/') ||\r\n    req.body.email.includes('\\\\')\r\n  ) {\r\n    return res.status(400).send('Invalid email.');\r\n  } else if (!req.body.name) {\r\n    return res.status(400).send('Invalid name.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.name,\r\n    2: req.body.email,\r\n    3: req.body.mobile || null,\r\n    4: req.body.company || null,\r\n    5: req.body.mobile2 || null,\r\n    6: req.body.addr || null,\r\n    7: req.body.order_no\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\n// staff to change order details e.g. price, qty, in case users changed mind.\r\n// staff may change status of specific product of the order.\r\ngiftsOrdersRouter.put('/updateOrderItem', (req: Request, res: Response) => {\r\n  if (!req.session || !req.session.staff.id) {\r\n    return res.sendStatus(401);\r\n  }\r\n\r\n  if (!req.body.order_no) {\r\n    return res.status(400).send('Failed. Invalid Order No.');\r\n  }\r\n  if (!req.body.sno || req.body.sno === '') {\r\n    return res.status(400).send('Failed. Invalid Order Sno.');\r\n  }\r\n\r\n  const param = {\r\n    1: req.body.new_sale_price,\r\n    2: req.body.new_qty,\r\n    3: req.body.new_status,\r\n    4: req.body.order_no,\r\n    5: req.body.sno\r\n  };\r\n  return res.status(200).send({ result: 'ok' });\r\n});\r\n\r\nexport default giftsOrdersRouter;\r\n","import { Request, Response } from '../interface';\r\nimport { SqliteAll, SqliteGet, SqliteRun } from '../db-ops/sqlite-ops';\r\nimport { bLogin } from '../gifts-users/gifts-users.ops';\r\nimport { CartItem, Customer } from '../gifts-users/users-interface';\r\nimport { randomString } from '../string-ops/random';\r\nimport { ReserveInventory } from '../gifts-products/gifts-products-inventory.ops';\r\n\r\nasync function GetUserOrders(session: any, res: Response) {\r\n  try {\r\n    let sql = `select * from giftsOrders where user_id=${session.user.user_id}`;\r\n    const orders = await SqliteAll(sql);\r\n    return res.status(200).send(orders);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function GetStaffOrders(session: any, res: Response) {\r\n  try {\r\n    let sql = `select * from giftsOrders`;\r\n    const orders = await SqliteAll(sql);\r\n    return res.status(200).send(orders);\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function NewOrder(req: Request, res: Response) {\r\n  try {\r\n    let fields = 'order_id,createdOn';\r\n\r\n    let order_id = 'SG_' + randomString(7);\r\n    let values = `\"${order_id}\",${Date.now()}`;\r\n\r\n    let sql = `insert into giftsOrders (${fields}) values (${values});`;\r\n    let rslt = SqliteRun(sql);\r\n    // let insertRslt = dbOrders.insertOne({\r\n    //   shipping: {\r\n    //     name: customer.name,\r\n    //     mobile: customer.mobile,\r\n    //     address: customer.address,\r\n    //     message: customer.message\r\n    //   },\r\n    //   payment: { method: 'visa', transaction_id: '2312213312XXXTD' },\r\n    //   cartItems: cartItems\r\n    // });\r\n    if (!rslt) {\r\n      return res.status(500).send({ message: 'Error, please retry later.' });\r\n    }\r\n\r\n    let reserveRslt = await ReserveInventory(order_id, req.body.products);\r\n    if (!reserveRslt) {\r\n      return res\r\n        .status(500)\r\n        .send({ message: 'Error, failed to reserve inventory.' });\r\n    }\r\n\r\n    return res.status(200).send({ message: 'Order successfully.' });\r\n  } catch (e) {\r\n    return res.status(500).send(e);\r\n  }\r\n}\r\n\r\n// async function GetCart(session: any, res: Response) {\r\n//   try {\r\n//     let sql = `select * from giftsOrders where user_id=${req.session.user.user_id}`;\r\n//     const orders = await SqliteAll(sql);\r\n//     let cart = await db\r\n//       .collection('gifts-carts')\r\n//       .find({ _id: req.session.user[0]._id })\r\n//       .toArray();\r\n\r\n//     return res.status(200).send(cart);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function UpdateCartQty(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     res.status(403).send('User not login.');\r\n//   }\r\n//   if (!req.body.productId || !req.body.quantity) {\r\n//     return res.status(400).send('Invalid input.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     let rslt = await db.collection('gifts-carts').updateOne(\r\n//       {\r\n//         _id: req.session.user[0]._id,\r\n//         'products.productId': req.body.productId\r\n//       },\r\n//       {\r\n//         $set: {\r\n//           'products.$.quantity': req.body.quantity,\r\n//           modifiedOn: new Date()\r\n//         }\r\n//       }\r\n//     );\r\n//     console.log(rslt);\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function DeleteCart(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db\r\n//       .collection('gifts-carts')\r\n//       .deleteOne({ _id: req.session.user[0]._id });\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function DeleteCartProduct(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db.collection('gifts-carts').updateOne(\r\n//       { _id: req.session.user[0]._id },\r\n//       {\r\n//         $set: { modifiedOn: new Date() },\r\n//         $pull: {\r\n//           products: {\r\n//             productId: req.body.productId,\r\n//             quantity: req.body.quantity\r\n//           }\r\n//         }\r\n//       }\r\n//     );\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// async function CartCheckout(req: Request, res: Response) {\r\n//   if (!bLogin(req.session)) {\r\n//     return res.status(400).send('User not login.');\r\n//   }\r\n\r\n//   try {\r\n//     const db = await MongoDb();\r\n//     await db.collection('gifts-carts').updateOne(\r\n//       { _id: req.session.user[0]._id },\r\n//       {\r\n//         $set: { modifiedOn: new Date() },\r\n//         $pull: {\r\n//           products: {\r\n//             productId: req.body.productId,\r\n//             quantity: req.body.quantity\r\n//           }\r\n//         }\r\n//       }\r\n//     );\r\n//     return res.sendStatus(200);\r\n//   } catch (e) {\r\n//     return res.status(500).send(e);\r\n//   }\r\n// }\r\n\r\n// export { DeleteCart, DeleteCartProduct, GetCart, UpdateCartQty };\r\nexport { GetUserOrders, GetStaffOrders, NewOrder };\r\n","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  Login,\r\n  Logout,\r\n  Register,\r\n  DisableAccount,\r\n  UserInfo\r\n} from '../gifts-users/gifts-users.ops';\r\n// import {\r\n//   AddToCart,\r\n//   CartCheckout,\r\n//   DeleteCart,\r\n//   DeleteInCart,\r\n//   GetCart,\r\n//   UpdateCartQty\r\n// } from '../gifts-users/gifts-carts.ops';\r\n\r\nconst giftsUsersRouter = Router();\r\n\r\n// url: /api/gifts/users/\r\ngiftsUsersRouter.post('/login', (req: Request, res: Response) => {\r\n  Login(req, res);\r\n});\r\ngiftsUsersRouter.get('/info', (req: Request, res: Response) => {\r\n  UserInfo(req.session, res);\r\n});\r\ngiftsUsersRouter.get('/logout', (req: Request, res: Response) => {\r\n  Logout(req, res);\r\n});\r\ngiftsUsersRouter.post('/register', (req: Request, res: Response) => {\r\n  Register(req.body, res);\r\n});\r\ngiftsUsersRouter.put('/disable', (req: Request, res: Response) => {\r\n  DisableAccount(req.session, res);\r\n});\r\n// giftsUsersRouter.get('/cart', (req: Request, res: Response) => {\r\n//   GetCart(req.session, res);\r\n// });\r\n// giftsUsersRouter.post('/cart', (req: Request, res: Response) => {\r\n//   AddToCart(req.session, req.body, res);\r\n// });\r\n// giftsUsersRouter.delete('/cart', (req: Request, res: Response) => {\r\n//   DeleteCart(req.session, res);\r\n// });\r\n// giftsUsersRouter.put('/cart', (req: Request, res: Response) => {\r\n//   UpdateCartQty(req, res);\r\n// });\r\n// giftsUsersRouter.delete('/cart/product', (req: Request, res: Response) => {\r\n//   DeleteInCart(req.session, req.query._id, res);\r\n// });\r\n// giftsUsersRouter.post('/cart/checkout', (req: Request, res: Response) => {\r\n//   CartCheckout(req, res);\r\n// });\r\n\r\nexport default giftsUsersRouter;\r\n","import { SqliteGet, SqliteAll, SqliteRun } from '../db-ops/sqlite-ops';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport { encrypt } from '../string-ops/crypto';\r\n\r\nasync function Login(req: Request, res: Response) {\r\n  if (req.session && req.session.staff) {\r\n    return res.status(200).send({ uid: req.session.staff.uid, bStaff: true });\r\n  }\r\n  if (req.session && req.session.user) {\r\n    return res.status(200).send({ uid: req.session.user.uid });\r\n  }\r\n  try {\r\n    // the id can be uid or email.\r\n    const id = (req.body.id || '').trim();\r\n    const pwd = encrypt(req.body.pwd);\r\n    let sql = '';\r\n\r\n    if (!id || !pwd) {\r\n      return res\r\n        .status(400)\r\n        .send({ message: 'username and password required.' });\r\n    }\r\n\r\n    sql = `select * from giftsStaffs \r\n          where (uid=\"${id}\" or email=\"${id}\") and pwd=\"${pwd}\" \r\n          and coalesce(inactive,0) <> 1;`;\r\n    req.session.staff = await SqliteGet(sql);\r\n    if (req.session.staff) {\r\n      return res.status(200).send({ uid: req.session.staff.uid, bStaff: true });\r\n    }\r\n\r\n    sql = `select * from giftsUsers \r\n            where (uid=\"${id}\" or email=\"${id}\") and pwd=\"${pwd}\" \r\n            and coalesce(inactive,0) <> 1;`;\r\n    req.session.user = await SqliteGet(sql);\r\n    if (req.session.user) {\r\n      return res.status(200).send({ uid: req.session.user.uid });\r\n    }\r\n    return res.status(403).send({ message: 'Incorrect username or password' });\r\n  } catch (e) {\r\n    // console.log(e);\r\n    return res.status(500).send({ message: 'server error.' });\r\n  }\r\n}\r\n\r\nfunction Logout(req: Request, res: Response) {\r\n  if (req.session && req.session.staff) {\r\n    req.session.staff = null;\r\n  }\r\n  if (req.session && req.session.user) {\r\n    req.session.user = null;\r\n  }\r\n  return res.status(200).send({ result: 'ok' });\r\n}\r\n\r\nasync function Register(body: any, res: Response) {\r\n  if (!body.email || !body.pwd) {\r\n    return res.status(400).send('Invalid input.');\r\n  }\r\n  try {\r\n    let fields = 'email,pwd,createdOn';\r\n    let values = `\"${body.email}\",\"` + encrypt(body.pwd) + '\",' + Date.now();\r\n    let rslt = await SqliteRun(\r\n      `insert into giftsUsers (${fields}) values (${values})`\r\n    );\r\n    if (rslt) {\r\n      return res.status(200).send({ result: 'ok' });\r\n    }\r\n    return res.status(500).send('Register failed. Please try again later.');\r\n  } catch (e) {\r\n    return res.status(500).send('Register failed. Please try again later.');\r\n  }\r\n}\r\n\r\nasync function DisableAccount(session: any, res: Response) {\r\n  if (!session || !session.user) {\r\n    return res.status(403).send('Login is required.');\r\n  }\r\n  try {\r\n    let rslt = SqliteRun(\r\n      `update giftsUsers set inactive=1 where email=\"${session.user.email}\"`\r\n    );\r\n    if (rslt) {\r\n      session.user = null;\r\n      return res.status(200).send({ result: 'Account disabled.' });\r\n    }\r\n    return res.status(500).send({ text: 'Error. Please try again later.' });\r\n  } catch (e) {\r\n    return res.status(400).send(e);\r\n  }\r\n}\r\n\r\nfunction UserInfo(session: any, res: Response) {\r\n  if (!bLogin(session)) {\r\n    return res.status(403).send({ text: 'User not login.' });\r\n  }\r\n  return res.status(200).send({\r\n    uid: session.staff ? session.staff.uid : session.user.uid,\r\n    email: session.staff ? session.staff.email : session.user.email\r\n  });\r\n}\r\n\r\nfunction bLogin(session: any) {\r\n  if (session) {\r\n    if (session.staff) {\r\n      return true;\r\n    }\r\n    if (session.user) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport { bLogin, DisableAccount, Login, Logout, Register, UserInfo };\r\n","module.exports = require(\"crypto\");","import { Router } from 'express';\r\n\r\nimport { Request, Response } from '../interface';\r\nimport {\r\n  deleteStaff,\r\n  disableStaff,\r\n  newStaff\r\n} from '../gifts-staffs/administrator';\r\n\r\nconst giftsStaffsRouter = Router();\r\n\r\ngiftsStaffsRouter.post('/admin/newStaff', (req: Request, res: Response) => {\r\n  newStaff(req, res);\r\n});\r\ngiftsStaffsRouter.put('/admin/disableStaff', (req: Request, res: Response) => {\r\n  disableStaff(req, res);\r\n});\r\ngiftsStaffsRouter.delete(\r\n  '/admin/deleteStaff',\r\n  (req: Request, res: Response) => {\r\n    deleteStaff(req, res);\r\n  }\r\n);\r\n\r\nexport default giftsStaffsRouter;\r\n","import { Request, Response } from '../interface';\r\nimport { SqliteRun } from '../db-ops/sqlite-ops';\r\nimport { encrypt } from '../string-ops/crypto';\r\n\r\nasync function newStaff(req: Request, res: Response) {\r\n  if (!req.session || !req.session.staff) {\r\n    // return res.status(401).send({ message: 'Unauthorized.' });\r\n  }\r\n  // if (req.session.staff.class != 'administrator') {\r\n  // return res.status(403).send({ message: 'Operation not allowed.' });\r\n  // }\r\n\r\n  try {\r\n    if (!req.body.uid) {\r\n      return res.status(400).send({ message: 'uid is empty.' });\r\n    }\r\n    let fields = 'uid';\r\n    let values = '\"' + req.body.uid + '\"';\r\n    if (!req.body.pwd) {\r\n      return res.status(400).send({ message: 'pwd is empty.' });\r\n    }\r\n    fields += ',pwd';\r\n    values += ',\"' + encrypt(req.body.pwd) + '\"';\r\n    if (!req.body.firstName) {\r\n      return res.status(400).send({ message: 'first name is empty.' });\r\n    }\r\n    fields += ',firstname';\r\n    values += ',\"' + req.body.firstName + '\"';\r\n    if (!req.body.lastName) {\r\n      return res.status(400).send({ message: 'last name is empty.' });\r\n    }\r\n    fields += ',lastname';\r\n    values += ',\"' + req.body.lastName + '\"';\r\n\r\n    const sql = `insert into giftsStaffs (${fields}) values (${values})`;\r\n    let result = await SqliteRun(sql);\r\n    if (result === true) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    res.status(200).send({ message: 'failed' + result });\r\n  } catch (e) {\r\n    // console.log(e);\r\n    res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function disableStaff(req: Request, res: Response) {\r\n  if (!req.session || !req.session.staff) {\r\n    return res.status(401).send({ message: 'Unauthorized.' });\r\n  }\r\n  // if (req.session.staff.class != 'administrator') {\r\n  // return res.status(403).send({ message: 'Operation not allowed.' });\r\n  // }\r\n\r\n  try {\r\n    if (!req.body.staff_id) {\r\n      return res.status(400).send({ message: 'staff_id is empty.' });\r\n    }\r\n\r\n    const sql = `update giftsStaffs set inactive=1 where staff_id=${req.body.staff_id}`;\r\n    let result = await SqliteRun(sql);\r\n    if (result === true) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    res.status(200).send({ message: 'failed' });\r\n  } catch (e) {\r\n    // console.log(e);\r\n    res.status(500).send(e);\r\n  }\r\n}\r\n\r\nasync function deleteStaff(req: Request, res: Response) {\r\n  if (!req.session || !req.session.staff) {\r\n    return res.status(401).send({ message: 'Unauthorized.' });\r\n  }\r\n  // if (req.session.staff.class != 'administrator') {\r\n  // return res.status(403).send({ message: 'Operation not allowed.' });\r\n  // }\r\n\r\n  try {\r\n    if (!req.query.staff_id) {\r\n      return res.status(400).send({ message: 'staff_id is empty.' });\r\n    }\r\n\r\n    const sql = `delete from giftsStaffs where staff_id=${req.query.staff_id}`;\r\n    let result = await SqliteRun(sql);\r\n    if (result === true) {\r\n      return res.status(200).send({ message: 'ok' });\r\n    }\r\n    res.status(200).send({ message: 'failed' });\r\n  } catch (e) {\r\n    // console.log(e);\r\n    res.status(500).send(e);\r\n  }\r\n}\r\n\r\nexport { disableStaff, deleteStaff, newStaff };\r\n","import { createTransport } from 'nodemailer';\r\n\r\nimport { Response } from '../interface';\r\n\r\nconst transporter = createTransport({\r\n  host: 'mail.insg.xyz',\r\n  secure: true,\r\n  auth: {\r\n    user: 'i@insg.xyz',\r\n    pass: 'pass1234'\r\n  }\r\n});\r\n\r\nconst mailOptions = {\r\n  from: 'i@insg.xyz',\r\n  to: 'seesea2@gmail.com',\r\n  subject: 'Hello',\r\n  text: 'This is email from InSG.xyz',\r\n  html: '<b>this is email from InSG.xyz</b>'\r\n};\r\n\r\nfunction SendEmail(body: any, res: Response) {\r\n  // const emailHtml: string =\r\n  //   '<!DOCTYPE html><head>' +\r\n  //   '<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"></head>' +\r\n  //   `<body><br><b>Message from User ${body.name}` +\r\n  //   ' :</b><br><br>' +\r\n  //   `<p><b>Email: </b> ${body.email}` +\r\n  //   '</p>' +\r\n  //   `<p><b>Mobile: </b> ${body.mobile}` +\r\n  //   '</p>' +\r\n  //   `<p><b>Message: </b> ${body.message}` +\r\n  //   '</p>' +\r\n  //   '</body></html>';\r\n\r\n  // mailOptions.subject = 'User Inquiry';\r\n  // mailOptions.html = emailHtml;\r\n  transporter.sendMail(mailOptions);\r\n  return res.status(200).send({ message: 'ok' });\r\n}\r\n\r\nexport default SendEmail;\r\n","module.exports = require(\"nodemailer\");"],"sourceRoot":""}